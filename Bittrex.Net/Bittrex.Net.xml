<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bittrex.Net</name>
    </assembly>
    <members>
        <member name="T:Bittrex.Net.BittrexClient">
            <summary>
            Client for the Bittrex Rest API
            </summary>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.#ctor">
            <summary>
            Create a new instance of BittrexClient using the default options
            </summary>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.#ctor(Bittrex.Net.Objects.BittrexClientOptions)">
            <summary>
            Create a new instance of the BittrexClient with the provided options
            </summary>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.SetDefaultOptions(Bittrex.Net.Objects.BittrexClientOptions)">
            <summary>
            Sets the default options to use for new clients
            </summary>
            <param name="options">The options to use for new clients</param>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret. Api keys can be managed at https://bittrex.com/Manage#sectionApi
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetSymbols(System.Threading.CancellationToken)">
            <summary>
            Gets information about all available symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of symbols</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets information about all available symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of symbols</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetCurrencies(System.Threading.CancellationToken)">
            <summary>
            Gets information about all available currencies
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of currencies</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetCurrenciesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets information about all available currencies
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of currencies</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetTicker(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the price of a symbol
            </summary>
            <param name="symbol">Symbol to get price for</param>
            <param name="ct">Cancellation token</param>
            <returns>The current ask, bid and last prices for the symbol</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the price of a symbol
            </summary>
            <param name="symbol">Symbol to get price for</param>
            <param name="ct">Cancellation token</param>
            <returns>The current ask, bid and last prices for the symbol</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetSymbolSummary(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a summary of the symbol
            </summary>
            <param name="symbol">The symbol to get info for</param>
            <param name="ct">Cancellation token</param>
            <returns>List with single entry containing info for the symbol</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetSymbolSummaryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a summary of the symbol
            </summary>
            <param name="symbol">The symbol to get info for</param>
            <param name="ct">Cancellation token</param>
            <returns>List with single entry containing info for the symbol</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetSymbolSummaries(System.Threading.CancellationToken)">
            <summary>
            Gets a summary for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of summaries for all symbols</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetSymbolSummariesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a summary for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of summaries for all symbols</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetOrderBook(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the order book with bids and asks for a symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="ct">Cancellation token</param>
            <returns>Order book for the symbol</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetOrderBookAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the order book with bids and asks for a symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="ct">Cancellation token</param>
            <returns>Order book for the symbol</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetBuyOrderBook(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the order book with bids for a symbol
            </summary>
            <param name="symbol">Symbol to get the order book for</param>
            <param name="ct">Cancellation token</param>
            <returns>Order book for the symbol</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetBuyOrderBookAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the order book with bids for a symbol
            </summary>
            <param name="symbol">Symbol to get the order book for</param>
            <param name="ct">Cancellation token</param>
            <returns>Order book for the symbol</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetSellOrderBook(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the order book with asks for a symbol
            </summary>
            <param name="symbol">Symbol to get the order book for</param>
            <param name="ct">Cancellation token</param>
            <returns>Order book for the symbol</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetSellOrderBookAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the order book with asks for a symbol
            </summary>
            <param name="symbol">Symbol to get the order book for</param>
            <param name="ct">Cancellation token</param>
            <returns>Order book for the symbol</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetSymbolTrades(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the last trades on a symbol
            </summary>
            <param name="symbol">Symbol to get history for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trade aggregations</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetSymbolTradesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the last trades on a symbol
            </summary>
            <param name="symbol">Symbol to get history for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trade aggregations</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetKlines(System.String,Bittrex.Net.Objects.TickInterval,System.Threading.CancellationToken)">
            <summary>
            Gets kline data for a symbol on a specific interval
            </summary>
            <param name="symbol">Symbol to get kline for</param>
            <param name="interval">The kline interval</param>
            <param name="ct">Cancellation token</param>
            <returns>List of klines</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetKlinesAsync(System.String,Bittrex.Net.Objects.TickInterval,System.Threading.CancellationToken)">
            <summary>
            Gets kline data for a symbol on a specific interval
            </summary>
            <param name="symbol">Symbol to get kline for</param>
            <param name="interval">The kline interval</param>
            <param name="ct">Cancellation token</param>
            <returns>List of klines</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetLastKline(System.String,Bittrex.Net.Objects.TickInterval,System.Threading.CancellationToken)">
            <summary>
            Gets kline data for a symbol on a specific interval
            </summary>
            <param name="symbol">Symbol to get klines for</param>
            <param name="interval">The kline interval</param>
            <param name="ct">Cancellation token</param>
            <returns>List of klines</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetLastKlineAsync(System.String,Bittrex.Net.Objects.TickInterval,System.Threading.CancellationToken)">
            <summary>
            Gets kline data for a symbol on a specific interval
            </summary>
            <param name="symbol">Symbol to get klines for</param>
            <param name="interval">The kline interval</param>
            <param name="ct">Cancellation token</param>
            <returns>List of klines</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.PlaceOrder(Bittrex.Net.Objects.OrderSide,System.String,System.Decimal,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Places an order
            </summary>
            <param name="side">Side of the order</param>
            <param name="symbol">Symbol to place the order on</param>
            <param name="quantity">The quantity of the order</param>
            <param name="rate">The rate per unit of the order</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.PlaceOrderAsync(Bittrex.Net.Objects.OrderSide,System.String,System.Decimal,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Places an order
            </summary>
            <param name="side">Side of the order</param>
            <param name="symbol">Symbol to place the order on</param>
            <param name="quantity">The quantity of the order</param>
            <param name="rate">The rate per unit of the order</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.CancelOrder(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Cancels an open order
            </summary>
            <param name="guid">The Guid of the order to cancel</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.CancelOrderAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Cancels an open order
            </summary>
            <param name="guid">The Guid of the order to cancel</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetOpenOrders(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">Filter list by symbol</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetOpenOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">Filter list by symbol</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetBalance(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the balance of a single currency
            </summary>
            <param name="currency">Currency to get the balance for</param>
            <param name="ct">Cancellation token</param>
            <returns>The balance of the currency</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetBalanceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the balance of a single currency
            </summary>
            <param name="currency">Currency to get the balance for</param>
            <param name="ct">Cancellation token</param>
            <returns>The balance of the currency</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetBalances(System.Threading.CancellationToken)">
            <summary>
            Gets a list of all balances for the current account
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of balances</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a list of all balances for the current account
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of balances</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetDepositAddress(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the deposit address for a specific currency
            </summary>
            <param name="currency">Currency to get deposit address for</param>
            <param name="ct">Cancellation token</param>
            <returns>The deposit address of the currency</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetDepositAddressAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the deposit address for a specific currency
            </summary>
            <param name="currency">Currency to get deposit address for</param>
            <param name="ct">Cancellation token</param>
            <returns>The deposit address of the currency</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.Withdraw(System.String,System.Decimal,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Places a withdraw request on Bittrex
            </summary>
            <param name="currency">The currency to withdraw</param>
            <param name="quantity">The quantity to withdraw</param>
            <param name="address">The address to withdraw to</param>
            <param name="paymentId">Optional string identifier to add to the withdraw</param>
            <param name="ct">Cancellation token</param>
            <returns>Guid of the withdrawal</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.WithdrawAsync(System.String,System.Decimal,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Places a withdraw request on Bittrex
            </summary>
            <param name="currency">The currency to withdraw</param>
            <param name="quantity">The quantity to withdraw</param>
            <param name="address">The address to withdraw to</param>
            <param name="paymentId">Optional string identifier to add to the withdraw</param>
            <param name="ct">Cancellation token</param>
            <returns>Guid of the withdrawal</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetOrder(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets an order by it's guid
            </summary>
            <param name="guid">The guid of the order</param>
            <param name="ct">Cancellation token</param>
            <returns>The requested order</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetOrderAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets an order by it's guid
            </summary>
            <param name="guid">The guid of the order</param>
            <param name="ct">Cancellation token</param>
            <returns>The requested order</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetOrderHistory(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the order history for the current account
            </summary>
            <param name="symbol">Filter on symbol</param>
            <param name="ct">Cancellation token</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetOrderHistoryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the order history for the current account
            </summary>
            <param name="symbol">Filter on symbol</param>
            <param name="ct">Cancellation token</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetWithdrawalHistory(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the withdrawal history of the current account
            </summary>
            <param name="currency">Filter on currency</param>
            <param name="ct">Cancellation token</param>
            <returns>List of withdrawals</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetWithdrawalHistoryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the withdrawal history of the current account
            </summary>
            <param name="currency">Filter on currency</param>
            <param name="ct">Cancellation token</param>
            <returns>List of withdrawals</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetDepositHistory(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the deposit history of the current account
            </summary>
            <param name="currency">Filter on currency</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetDepositHistoryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the deposit history of the current account
            </summary>
            <param name="currency">Filter on currency</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.GetUrl(System.String,System.String,System.String)">
            <summary>
            Get url for endpoint
            </summary>
            <param name="endpoint"></param>
            <param name="api"></param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClient.ParseErrorResponse(Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="T:Bittrex.Net.BittrexClientV3">
            <summary>
            Client for the V3 API
            NOTE: The V3 API is in open beta. Errors might happen. If so, please report them on https://github.com/jkorf/bittrex.net
            </summary>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.#ctor">
            <summary>
            Create a new instance of BittrexClient using the default options
            NOTE: The V3 API is in open beta. Errors might happen. If so, please report them on https://github.com/jkorf/bittrex.net
            </summary>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.#ctor(Bittrex.Net.Objects.BittrexClientOptions)">
            <summary>
            Create a new instance of BittrexClient using the default options
            NOTE: The V3 API is in open beta. Errors might happen. If so, please report them on https://github.com/jkorf/bittrex.net
            </summary>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.SetDefaultOptions(Bittrex.Net.Objects.BittrexClientOptions)">
            <summary>
            Sets the default options to use for new clients
            </summary>
            <param name="options">The options to use for new clients</param>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret. Api keys can be managed at https://bittrex.com/Manage#sectionApi
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetServerTime(System.Threading.CancellationToken)">
            <summary>
            Gets the server time
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Time of the server</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetServerTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the server time
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Time of the server</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetSymbols(System.Threading.CancellationToken)">
            <summary>
            Gets information about all available symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of symbols</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets information about all available symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of symbols</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetSymbol(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets information about a symbol
            </summary>
            <param name="symbol">The symbol to get info for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of symbols</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetSymbolAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets information about a symbol
            </summary>
            <param name="symbol">The symbol to get info for</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol info</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetSymbolSummaries(System.Threading.CancellationToken)">
            <summary>
            Gets summaries of all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of symbol summaries</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetSymbolSummariesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets summaries of all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of symbol summaries</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetSymbolSummary(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets summary of a symbol
            </summary>
            <param name="symbol">The symbol to get info for</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol summary</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetSymbolSummaryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets summary of a symbol
            </summary>
            <param name="symbol">The symbol to get info for</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol summary</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetOrderBook(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the order book of a symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol order book</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetOrderBookAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the order book of a symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol order book</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetSymbolTrades(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the trade history of a symbol
            </summary>
            <param name="symbol">The symbol to get trades for</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol trade list</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetSymbolTradesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the trade history of a symbol
            </summary>
            <param name="symbol">The symbol to get trades for</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol trade list</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetTicker(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the ticker of a symbol
            </summary>
            <param name="symbol">The symbol to get ticker for</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol ticker</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the ticker of a symbol
            </summary>
            <param name="symbol">The symbol to get ticker for</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol ticker</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetTickers(System.Threading.CancellationToken)">
            <summary>
            Gets list of tickers for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Symbol tickers</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetTickersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets list of tickers for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Symbol tickers</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetKlines(System.String,Bittrex.Net.Objects.KlineInterval,System.Threading.CancellationToken)">
            <summary>
            Gets the klines for a symbol
            </summary>
            <param name="symbol">The symbol to get klines for</param>
            <param name="interval">The interval of the klines</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol kline</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetKlinesAsync(System.String,Bittrex.Net.Objects.KlineInterval,System.Threading.CancellationToken)">
            <summary>
            Gets the klines for a symbol
            </summary>
            <param name="symbol">The symbol to get klines for</param>
            <param name="interval">The interval of the klines</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol klines</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetCurrencies(System.Threading.CancellationToken)">
            <summary>
            Gets a list of all currencies
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of currencies</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetCurrenciesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a list of all currencies
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of currencies</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetCurrency(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets info on a currency
            </summary>
            <param name="currency">The name of the currency</param>
            <param name="ct">Cancellation token</param>
            <returns>Currency info</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetCurrencyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets info on a currency
            </summary>
            <param name="currency">The name of the currency</param>
            <param name="ct">Cancellation token</param>
            <returns>Currency info</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetBalances(System.Threading.CancellationToken)">
            <summary>
            Gets current balances
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of balances</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets current balances
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of balances</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetBalance(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets current balance for a currency
            </summary>
            <param name="currency">The name of the currency to get balance for</param>
            <param name="ct">Cancellation token</param>
            <returns>Balance for currency</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetBalanceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets current balance for a currency
            </summary>
            <param name="currency">The name of the currency to get balance for</param>
            <param name="ct">Cancellation token</param>
            <returns>Balance for currency</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetDepositAddresses(System.Threading.CancellationToken)">
            <summary>
            Gets list of deposit addresses
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of deposit addresses</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetDepositAddressesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets list of deposit addresses
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of deposit addresses</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetDepositAddress(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets deposit addresses for a currency
            </summary>
            <param name="currency">The name of the currency to get the deposit address for</param>
            <param name="ct">Cancellation token</param>
            <returns>Deposit addresses</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetDepositAddressAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets deposit addresses for a currency
            </summary>
            <param name="currency">The name of the currency to get the deposit address for</param>
            <param name="ct">Cancellation token</param>
            <returns>Deposit addresses</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.RequestDepositAddress(System.String,System.Threading.CancellationToken)">
            <summary>
            Request a deposit address for a currency
            </summary>
            <param name="currency">The name of the currency to get request a deposit address for</param>
            <param name="ct">Cancellation token</param>
            <returns>The deposit address</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.RequestDepositAddressAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Request a deposit address for a currency
            </summary>
            <param name="currency">The name of the currency to get request a deposit address for</param>
            <param name="ct">Cancellation token</param>
            <returns>The deposit address</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetOpenDeposits(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets list of open deposits
            </summary>
            <param name="currency">Filter the list by currency</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetOpenDepositsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets list of open deposits
            </summary>
            <param name="currency">Filter the list by currency</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetClosedDeposits(System.String,System.Nullable{Bittrex.Net.Objects.DepositStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets list of closed deposits
            </summary>
            <param name="currency">Filter the list by currency</param>
            <param name="status">Filter the list by status of the deposit</param>
            <param name="startDate">Filter the list by date</param>
            <param name="endDate">Filter the list by date</param>
            <param name="pageSize">The max amount of results to return</param>
            <param name="nextPageToken">The id of the object after which to return results. Typically the last deposit id of the previous page</param>
            <param name="previousPageToken">The id of the object before which to return results. Typically the first deposit id of the next page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetClosedDepositsAsync(System.String,System.Nullable{Bittrex.Net.Objects.DepositStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets list of closed deposits
            </summary>
            <param name="currency">Filter the list by currency</param>
            <param name="status">Filter the list by status of the deposit</param>
            <param name="startDate">Filter the list by date</param>
            <param name="endDate">Filter the list by date</param>
            <param name="pageSize">The max amount of results to return</param>
            <param name="nextPageToken">The id of the object after which to return results. Typically the last deposit id of the previous page</param>
            <param name="previousPageToken">The id of the object before which to return results. Typically the first deposit id of the next page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetDepositsByTransactionId(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets list of deposits for a transaction id
            </summary>
            <param name="transactionId">The id of the transaction</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetDepositsByTransactionIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets list of deposits for a transaction id
            </summary>
            <param name="transactionId">The id of the transaction</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetDeposit(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a deposit by id
            </summary>
            <param name="depositId">The id of the deposit</param>
            <param name="ct">Cancellation token</param>
            <returns>Deposit info</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetDepositAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a deposit by id
            </summary>
            <param name="depositId">The id of the deposit</param>
            <param name="ct">Cancellation token</param>
            <returns>Deposit info</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetClosedOrders(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of closed orders
            </summary>
            <param name="symbol">Filter the list by symbol</param>
            <param name="startDate">Filter the list by date</param>
            <param name="endDate">Filter the list by date</param>
            <param name="pageSize">The max amount of results to return</param>
            <param name="nextPageToken">The id of the object after which to return results. Typically the last order id of the previous page</param>
            <param name="previousPageToken">The id of the object before which to return results. Typically the first order id of the next page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of closed orders</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetClosedOrdersAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of closed orders
            </summary>
            <param name="symbol">Filter the list by symbol</param>
            <param name="startDate">Filter the list by date</param>
            <param name="endDate">Filter the list by date</param>
            <param name="pageSize">The max amount of results to return</param>
            <param name="nextPageToken">The id of the object after which to return results. Typically the last order id of the previous page</param>
            <param name="previousPageToken">The id of the object before which to return results. Typically the first order id of the next page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of closed orders</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetOpenOrders(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetOpenOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetOrder(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets info on an order
            </summary>
            <param name="orderId">The id of the order to retrieve</param>
            <param name="ct">Cancellation token</param>
            <returns>Order info</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetOrderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets info on an order
            </summary>
            <param name="orderId">The id of the order to retrieve</param>
            <param name="ct">Cancellation token</param>
            <returns>Order info</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.CancelOrder(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels an order
            </summary>
            <param name="orderId">The id of the order</param>
            <param name="ct">Cancellation token</param>
            <returns>Order info</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.CancelOrderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels an order
            </summary>
            <param name="orderId">The id of the order</param>
            <param name="ct">Cancellation token</param>
            <returns>Order info</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.PlaceOrder(System.String,Bittrex.Net.Objects.OrderSide,Bittrex.Net.Objects.OrderTypeV3,System.Decimal,Bittrex.Net.Objects.TimeInForce,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Threading.CancellationToken)">
            <summary>
            Places an order
            </summary>
            <param name="symbol">The symbol of the order</param>
            <param name="direction">The direction of the order</param>
            <param name="type">The type of order</param>
            <param name="quantity">The quantity of the order</param>
            <param name="timeInForce">The time in force of the order</param>
            <param name="limit">The limit price of the order (limit orders only)</param>
            <param name="ceiling">The ceiling price of the order (ceiling orders only)</param>
            <param name="clientOrderId">Id to track the order by</param>
            <param name="ct">Cancellation token</param>
            <returns>The order info</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.PlaceOrderAsync(System.String,Bittrex.Net.Objects.OrderSide,Bittrex.Net.Objects.OrderTypeV3,System.Decimal,Bittrex.Net.Objects.TimeInForce,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Threading.CancellationToken)">
            <summary>
            Places an order
            </summary>
            <param name="symbol">The symbol of the order</param>
            <param name="direction">The direction of the order</param>
            <param name="type">The type of order</param>
            <param name="quantity">The quantity of the order</param>
            <param name="timeInForce">The time in force of the order</param>
            <param name="limit">The limit price of the order (limit orders only)</param>
            <param name="ceiling">The ceiling price of the order (ceiling orders only)</param>
            <param name="clientOrderId">Id to track the order by</param>
            <param name="ct">Cancellation token</param>
            <returns>The order info</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetOpenWithdrawals(System.String,System.Nullable{Bittrex.Net.Objects.WithdrawalStatus},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open withdrawals
            </summary>
            <param name="currency">Filter by currency</param>
            <param name="status">Filter by status</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open withdrawals</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetOpenWithdrawalsAsync(System.String,System.Nullable{Bittrex.Net.Objects.WithdrawalStatus},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open withdrawals
            </summary>
            <param name="currency">Filter by currency</param>
            <param name="status">Filter by status</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open withdrawals</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetClosedWithdrawals(System.String,System.Nullable{Bittrex.Net.Objects.WithdrawalStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of closed withdrawals
            </summary>
            <param name="currency">Filter by currency</param>
            <param name="status">Filter by status</param>
            <param name="startDate">Filter by date</param>
            <param name="endDate">Filter by date</param>
            <param name="pageSize">The max amount of results to return</param>
            <param name="nextPageToken">The id of the object after which to return results. Typically the last withdrawal id of the previous page</param>
            <param name="previousPageToken">The id of the object before which to return results. Typically the first withdrawal id of the next page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of closed withdrawals</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetClosedWithdrawalsAsync(System.String,System.Nullable{Bittrex.Net.Objects.WithdrawalStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of closed withdrawals
            </summary>
            <param name="currency">Filter by currency</param>
            <param name="status">Filter by status</param>
            <param name="startDate">Filter by date</param>
            <param name="endDate">Filter by date</param>
            <param name="pageSize">The max amount of results to return</param>
            <param name="nextPageToken">The id of the object after which to return results. Typically the last withdrawal id of the previous page</param>
            <param name="previousPageToken">The id of the object before which to return results. Typically the first withdrawal id of the next page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of closed withdrawals</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetWithdrawalsByTransactionId(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of withdrawals by transaction id
            </summary>
            <param name="transactionId">The id of the transaction</param>
            <param name="ct">Cancellation token</param>
            <returns>List withdrawals</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetWithdrawalsByTransactionIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of withdrawals by transaction id
            </summary>
            <param name="transactionId">The id of the transaction</param>
            <param name="ct">Cancellation token</param>
            <returns>List withdrawals</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetWithdrawal(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets withdrawal by id
            </summary>
            <param name="id">The id of the withdrawal</param>
            <param name="ct">Cancellation token</param>
            <returns>Withdrawal info</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetWithdrawalAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets withdrawal by id
            </summary>
            <param name="id">The id of the withdrawal</param>
            <param name="ct">Cancellation token</param>
            <returns>Withdrawal info</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.CancelWithdrawal(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels a withdrawal
            </summary>
            <param name="id">The id of the withdrawal to cancel</param>
            <param name="ct">Cancellation token</param>
            <returns>Withdrawal info</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.CancelWithdrawalAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels a withdrawal
            </summary>
            <param name="id">The id of the withdrawal to cancel</param>
            <param name="ct">Cancellation token</param>
            <returns>Withdrawal info</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.Withdraw(System.String,System.Decimal,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Withdraw from Bittrex
            </summary>
            <param name="currency">The currency to withdraw</param>
            <param name="quantity">The quantity to withdraw</param>
            <param name="address">The address to withdraw to</param>
            <param name="addressTag">A tag for the address</param>
            <param name="ct">Cancellation token</param>
            <returns>Info about the withdrawal</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.WithdrawAsync(System.String,System.Decimal,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Withdraw from Bittrex
            </summary>
            <param name="currency">The currency to withdraw</param>
            <param name="quantity">The quantity to withdraw</param>
            <param name="address">The address to withdraw to</param>
            <param name="addressTag">A tag for the address</param>
            <param name="ct">Cancellation token</param>
            <returns>Info about the withdrawal</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.ParseErrorResponse(Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexClientV3.GetUrl(System.String)">
            <summary>
            Get url for an endpoint
            </summary>
            <param name="endpoint"></param>
            <returns></returns>
        </member>
        <member name="T:Bittrex.Net.BittrexHelpers">
            <summary>
            Helper functions
            </summary>
        </member>
        <member name="M:Bittrex.Net.BittrexHelpers.ValidateBittrexSymbol(System.String)">
            <summary>
            Validate the string is a valid Bittrex symbol.
            </summary>
            <param name="symbolString">string to validate</param>
        </member>
        <member name="T:Bittrex.Net.BittrexSocketClient">
            <summary>
            Client for the Bittrex socket API
            </summary>
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.#ctor">
            <summary>
            Creates a new socket client using the default options
            </summary>
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.#ctor(Bittrex.Net.Objects.BittrexSocketClientOptions)">
            <summary>
            Creates a new socket client using the provided options
            </summary>
            <param name="options">Options to use for this client</param>
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.SetDefaultOptions(Bittrex.Net.Objects.BittrexSocketClientOptions)">
            <summary>
            Set the default options for new clients
            </summary>
            <param name="options">Options to use for new clients</param>
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.GetSymbolSummaries">
            <summary>
            Gets the current summaries for all symbols
            </summary>
            <returns>Symbol summaries</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.GetSymbolSummariesAsync">
            <summary>
            Gets the current summaries for all symbols
            </summary>
            <returns>Symbol summaries</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.GetOrderBook(System.String)">
            <summary>
            Gets the state of a specific symbol
            500 Buys
            100 Fills
            500 Sells
            </summary>
            <param name="symbol">The name of the symbol to query</param>
            <returns>The current exchange state</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.GetOrderBookAsync(System.String)">
            <summary>
            Gets the state of a specific symbol
            500 Buys
            100 Fills
            500 Sells
            </summary>
            <param name="symbol">The name of the symbol to query</param>
            <returns>The current exchange state</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.SubscribeToOrderBookUpdates(System.String,System.Action{Bittrex.Net.Objects.BittrexStreamOrderBookUpdate})">
            <summary>
            Subscribes to order book and trade updates on a specific symbol
            </summary>
            <param name="symbol">The name of the symbol to subscribe on</param>
            <param name="onUpdate">The update event handler</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.SubscribeToOrderBookUpdatesAsync(System.String,System.Action{Bittrex.Net.Objects.BittrexStreamOrderBookUpdate})">
            <summary>
            Subscribes to order book and trade updates on a specific symbol
            </summary>
            <param name="symbol">The name of the symbol to subscribe on</param>
            <param name="onUpdate">The update event handler</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.SubscribeToSymbolSummariesUpdate(System.Action{System.Collections.Generic.IEnumerable{Bittrex.Net.Objects.BittrexStreamSymbolSummary}})">
            <summary>
            Subscribes to updates of summaries for all symbols
            </summary>
            <param name="onUpdate">The update event handler</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.SubscribeToSymbolSummariesUpdateAsync(System.Action{System.Collections.Generic.IEnumerable{Bittrex.Net.Objects.BittrexStreamSymbolSummary}})">
            <summary>
            Subscribes to updates of summaries for all symbols
            </summary>
            <param name="onUpdate">The update event handler</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.SubscribeToSymbolSummariesLiteUpdate(System.Action{System.Collections.Generic.IEnumerable{Bittrex.Net.Objects.BittrexStreamSymbolSummaryLite}})">
            <summary>
            Subscribes to lite summary updates for all symbols
            </summary>
            <param name="onUpdate">The update event handler</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.SubscribeToSymbolSummariesLiteUpdateAsync(System.Action{System.Collections.Generic.IEnumerable{Bittrex.Net.Objects.BittrexStreamSymbolSummaryLite}})">
            <summary>
            Subscribes to lite summary updates for all symbols
            </summary>
            <param name="onUpdate">The update event handler</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.SubscribeToAccountUpdates(System.Action{Bittrex.Net.Objects.BittrexStreamBalanceData},System.Action{Bittrex.Net.Objects.BittrexStreamOrderData})">
            <summary>
            Subscribes to balance updates
            </summary>
            <param name="onBalanceUpdate">The update event handler for balance updates</param>
            <param name="onOrderUpdate">The update event handler for order updates</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.SubscribeToAccountUpdatesAsync(System.Action{Bittrex.Net.Objects.BittrexStreamBalanceData},System.Action{Bittrex.Net.Objects.BittrexStreamOrderData})">
            <summary>
            Subscribes to balance updates
            </summary>
            <param name="onBalanceUpdate">The update event handler for balance updates</param>
            <param name="onOrderUpdate">The update event handler for order updates</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.GetWebsocket(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.SubscribeAndWait(CryptoExchange.Net.Sockets.SocketConnection,System.Object,CryptoExchange.Net.Sockets.SocketSubscription)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.QueryAndWait``1(CryptoExchange.Net.Sockets.SocketConnection,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.HandleQueryResponse``1(CryptoExchange.Net.Sockets.SocketConnection,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{``0}@)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.HandleSubscriptionResponse(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.MessageMatchesHandler(Newtonsoft.Json.Linq.JToken,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.MessageMatchesHandler(Newtonsoft.Json.Linq.JToken,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.AuthenticateSocket(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.Unsubscribe(CryptoExchange.Net.Sockets.UpdateSubscription)">
            <summary>
            Unsubscribe from a stream
            * NOT SUPPORTED BY BITTREX' CURRENT SOCKET IMPLEMENTATION *
            </summary>
            <param name="subscription">The subscription to unsubscribe</param>
            <returns></returns>
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.Unsubscribe(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClient.CreateSocket(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Bittrex.Net.BittrexSymbolOrderBook">
            <summary>
            Order book implementation
            </summary>
        </member>
        <member name="M:Bittrex.Net.BittrexSymbolOrderBook.#ctor(System.String,Bittrex.Net.Objects.BittrexOrderBookOptions)">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="options">Options for the order book</param>
        </member>
        <member name="M:Bittrex.Net.BittrexSymbolOrderBook.DoStart">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSymbolOrderBook.DoResync">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSymbolOrderBook.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Bittrex.Net.Interfaces.IBittrexClient">
            <summary>
            Interface for the Bittrex client
            </summary>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret. Api keys can be managed at https://bittrex.com/Manage#sectionApi
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetSymbols(System.Threading.CancellationToken)">
            <summary>
            Gets information about all available symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of symbols</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets information about all available symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of symbols</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetCurrencies(System.Threading.CancellationToken)">
            <summary>
            Gets information about all available currencies
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of currencies</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetCurrenciesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets information about all available currencies
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of currencies</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetTicker(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the price of a symbol
            </summary>
            <param name="symbol">Symbol to get price for</param>
            <param name="ct">Cancellation token</param>
            <returns>The current ask, bid and last prices for the symbol</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the price of a symbol
            </summary>
            <param name="symbol">Symbol to get price for</param>
            <param name="ct">Cancellation token</param>
            <returns>The current ask, bid and last prices for the symbol</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetSymbolSummary(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a summary of the symbol
            </summary>
            <param name="symbol">The symbol to get info for</param>
            <param name="ct">Cancellation token</param>
            <returns>List with single entry containing info for the symbol</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetSymbolSummaryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a summary of the symbol
            </summary>
            <param name="symbol">The symbol to get info for</param>
            <param name="ct">Cancellation token</param>
            <returns>List with single entry containing info for the symbol</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetSymbolSummaries(System.Threading.CancellationToken)">
            <summary>
            Gets a summary for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of summaries for all symbols</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetSymbolSummariesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a summary for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of summaries for all symbols</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetOrderBook(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the order book with bids and asks for a symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="ct">Cancellation token</param>
            <returns>Order book for the symbol</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetOrderBookAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the order book with bids and asks for a symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="ct">Cancellation token</param>
            <returns>Order book for the symbol</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetBuyOrderBook(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the order book with bids for a symbol
            </summary>
            <param name="symbol">Symbol to get the order book for</param>
            <param name="ct">Cancellation token</param>
            <returns>Order book for the symbol</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetBuyOrderBookAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the order book with bids for a symbol
            </summary>
            <param name="symbol">Symbol to get the order book for</param>
            <param name="ct">Cancellation token</param>
            <returns>Order book for the symbol</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetSellOrderBook(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the order book with asks for a symbol
            </summary>
            <param name="symbol">Symbol to get the order book for</param>
            <param name="ct">Cancellation token</param>
            <returns>Order book for the symbol</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetSellOrderBookAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the order book with asks for a symbol
            </summary>
            <param name="symbol">Symbol to get the order book for</param>
            <param name="ct">Cancellation token</param>
            <returns>Order book for the symbol</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetSymbolTrades(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the last trades on a symbol
            </summary>
            <param name="symbol">Symbol to get history for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trade aggregations</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetSymbolTradesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the last trades on a symbol
            </summary>
            <param name="symbol">Symbol to get history for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trade aggregations</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetKlines(System.String,Bittrex.Net.Objects.TickInterval,System.Threading.CancellationToken)">
            <summary>
            Gets kline data for a symbol on a specific interval
            </summary>
            <param name="symbol">Symbol to get kline for</param>
            <param name="interval">The kline interval</param>
            <param name="ct">Cancellation token</param>
            <returns>List of klines</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetKlinesAsync(System.String,Bittrex.Net.Objects.TickInterval,System.Threading.CancellationToken)">
            <summary>
            Gets kline data for a symbol on a specific interval
            </summary>
            <param name="symbol">Symbol to get kline for</param>
            <param name="interval">The kline interval</param>
            <param name="ct">Cancellation token</param>
            <returns>List of klines</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetLastKline(System.String,Bittrex.Net.Objects.TickInterval,System.Threading.CancellationToken)">
            <summary>
            Gets kline data for a symbol on a specific interval
            </summary>
            <param name="symbol">Symbol to get klines for</param>
            <param name="interval">The kline interval</param>
            <param name="ct">Cancellation token</param>
            <returns>List of klines</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetLastKlineAsync(System.String,Bittrex.Net.Objects.TickInterval,System.Threading.CancellationToken)">
            <summary>
            Gets kline data for a symbol on a specific interval
            </summary>
            <param name="symbol">Symbol to get klines for</param>
            <param name="interval">The kline interval</param>
            <param name="ct">Cancellation token</param>
            <returns>List of klines</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.PlaceOrder(Bittrex.Net.Objects.OrderSide,System.String,System.Decimal,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Places an order
            </summary>
            <param name="side">Side of the order</param>
            <param name="symbol">Symbol to place the order on</param>
            <param name="quantity">The quantity of the order</param>
            <param name="rate">The rate per unit of the order</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.PlaceOrderAsync(Bittrex.Net.Objects.OrderSide,System.String,System.Decimal,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Places an order
            </summary>
            <param name="side">Side of the order</param>
            <param name="symbol">Symbol to place the order on</param>
            <param name="quantity">The quantity of the order</param>
            <param name="rate">The rate per unit of the order</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.CancelOrder(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Cancels an open order
            </summary>
            <param name="guid">The Guid of the order to cancel</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.CancelOrderAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Cancels an open order
            </summary>
            <param name="guid">The Guid of the order to cancel</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetOpenOrders(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">Filter list by symbol</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetOpenOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">Filter list by symbol</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetBalance(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the balance of a single currency
            </summary>
            <param name="currency">Currency to get the balance for</param>
            <param name="ct">Cancellation token</param>
            <returns>The balance of the currency</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetBalanceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the balance of a single currency
            </summary>
            <param name="currency">Currency to get the balance for</param>
            <param name="ct">Cancellation token</param>
            <returns>The balance of the currency</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetBalances(System.Threading.CancellationToken)">
            <summary>
            Gets a list of all balances for the current account
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of balances</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a list of all balances for the current account
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of balances</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetDepositAddress(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the deposit address for a specific currency
            </summary>
            <param name="currency">Currency to get deposit address for</param>
            <param name="ct">Cancellation token</param>
            <returns>The deposit address of the currency</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetDepositAddressAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the deposit address for a specific currency
            </summary>
            <param name="currency">Currency to get deposit address for</param>
            <param name="ct">Cancellation token</param>
            <returns>The deposit address of the currency</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.Withdraw(System.String,System.Decimal,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Places a withdraw request on Bittrex
            </summary>
            <param name="currency">The currency to withdraw</param>
            <param name="quantity">The quantity to withdraw</param>
            <param name="address">The address to withdraw to</param>
            <param name="paymentId">Optional string identifier to add to the withdraw</param>
            <param name="ct">Cancellation token</param>
            <returns>Guid of the withdrawal</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.WithdrawAsync(System.String,System.Decimal,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Places a withdraw request on Bittrex
            </summary>
            <param name="currency">The currency to withdraw</param>
            <param name="quantity">The quantity to withdraw</param>
            <param name="address">The address to withdraw to</param>
            <param name="paymentId">Optional string identifier to add to the withdraw</param>
            <param name="ct">Cancellation token</param>
            <returns>Guid of the withdrawal</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetOrder(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets an order by it's guid
            </summary>
            <param name="guid">The guid of the order</param>
            <param name="ct">Cancellation token</param>
            <returns>The requested order</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetOrderAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets an order by it's guid
            </summary>
            <param name="guid">The guid of the order</param>
            <param name="ct">Cancellation token</param>
            <returns>The requested order</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetOrderHistory(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the order history for the current account
            </summary>
            <param name="symbol">Filter on symbol</param>
            <param name="ct">Cancellation token</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetOrderHistoryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the order history for the current account
            </summary>
            <param name="symbol">Filter on symbol</param>
            <param name="ct">Cancellation token</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetWithdrawalHistory(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the withdrawal history of the current account
            </summary>
            <param name="currency">Filter on currency</param>
            <param name="ct">Cancellation token</param>
            <returns>List of withdrawals</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetWithdrawalHistoryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the withdrawal history of the current account
            </summary>
            <param name="currency">Filter on currency</param>
            <param name="ct">Cancellation token</param>
            <returns>List of withdrawals</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetDepositHistory(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the deposit history of the current account
            </summary>
            <param name="currency">Filter on currency</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClient.GetDepositHistoryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the deposit history of the current account
            </summary>
            <param name="currency">Filter on currency</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="T:Bittrex.Net.Interfaces.IBittrexClientV3">
            <summary>
            Interface for the Bittrex V3 API client
            </summary>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret. Api keys can be managed at https://bittrex.com/Manage#sectionApi
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetServerTime(System.Threading.CancellationToken)">
            <summary>
            Gets the server time
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Time of the server</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetServerTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the server time
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Time of the server</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetSymbols(System.Threading.CancellationToken)">
            <summary>
            Gets information about all available symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of symbols</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets information about all available symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of symbols</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetSymbol(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets information about a symbol
            </summary>
            <param name="symbol">The symbol to get info for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of symbols</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetSymbolAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets information about a symbol
            </summary>
            <param name="symbol">The symbol to get info for</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetSymbolSummaries(System.Threading.CancellationToken)">
            <summary>
            Gets summaries of all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of symbol summaries</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetSymbolSummariesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets summaries of all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of symbol summaries</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetSymbolSummary(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets summary of a symbol
            </summary>
            <param name="symbol">The symbol to get info for</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol summary</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetSymbolSummaryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets summary of a symbol
            </summary>
            <param name="symbol">The symbol to get info for</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol summary</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetOrderBook(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the order book of a symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol order book</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetOrderBookAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the order book of a symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol order book</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetSymbolTrades(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the trade history of a symbol
            </summary>
            <param name="symbol">The symbol to get trades for</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol trade list</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetSymbolTradesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the trade history of a symbol
            </summary>
            <param name="symbol">The symbol to get trades for</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol trade list</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetTicker(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the ticker of a symbol
            </summary>
            <param name="symbol">The symbol to get ticker for</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol ticker</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the ticker of a symbol
            </summary>
            <param name="symbol">The symbol to get ticker for</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol ticker</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetTickers(System.Threading.CancellationToken)">
            <summary>
            Gets list of tickers for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Symbol tickers</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetTickersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets list of tickers for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Symbol tickers</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetKlines(System.String,Bittrex.Net.Objects.KlineInterval,System.Threading.CancellationToken)">
            <summary>
            Gets the klines for a symbol
            </summary>
            <param name="symbol">The symbol to get klines for</param>
            <param name="interval">The interval of the klines</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol kline</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetKlinesAsync(System.String,Bittrex.Net.Objects.KlineInterval,System.Threading.CancellationToken)">
            <summary>
            Gets the klines for a symbol
            </summary>
            <param name="symbol">The symbol to get klines for</param>
            <param name="interval">The interval of the klines</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol klines</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetCurrencies(System.Threading.CancellationToken)">
            <summary>
            Gets a list of all currencies
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of currencies</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetCurrenciesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a list of all currencies
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of currencies</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetCurrency(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets info on a currency
            </summary>
            <param name="currency">The name of the currency</param>
            <param name="ct">Cancellation token</param>
            <returns>Currency info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetCurrencyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets info on a currency
            </summary>
            <param name="currency">The name of the currency</param>
            <param name="ct">Cancellation token</param>
            <returns>Currency info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetBalances(System.Threading.CancellationToken)">
            <summary>
            Gets current balances
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of balances</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets current balances
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of balances</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetBalance(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets current balance for a currency
            </summary>
            <param name="currency">The name of the currency to get balance for</param>
            <param name="ct">Cancellation token</param>
            <returns>Balance for currency</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetBalanceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets current balance for a currency
            </summary>
            <param name="currency">The name of the currency to get balance for</param>
            <param name="ct">Cancellation token</param>
            <returns>Balance for currency</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetDepositAddresses(System.Threading.CancellationToken)">
            <summary>
            Gets list of deposit addresses
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of deposit addresses</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetDepositAddressesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets list of deposit addresses
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of deposit addresses</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetDepositAddress(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets deposit addresses for a currency
            </summary>
            <param name="currency">The name of the currency to get the deposit address for</param>
            <param name="ct">Cancellation token</param>
            <returns>Deposit addresses</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetDepositAddressAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets deposit addresses for a currency
            </summary>
            <param name="currency">The name of the currency to get the deposit address for</param>
            <param name="ct">Cancellation token</param>
            <returns>Deposit addresses</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.RequestDepositAddress(System.String,System.Threading.CancellationToken)">
            <summary>
            Request a deposit address for a currency
            </summary>
            <param name="currency">The name of the currency to get request a deposit address for</param>
            <param name="ct">Cancellation token</param>
            <returns>The deposit address</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.RequestDepositAddressAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Request a deposit address for a currency
            </summary>
            <param name="currency">The name of the currency to get request a deposit address for</param>
            <param name="ct">Cancellation token</param>
            <returns>The deposit address</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetOpenDeposits(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets list of open deposits
            </summary>
            <param name="currency">Filter the list by currency</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetOpenDepositsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets list of open deposits
            </summary>
            <param name="currency">Filter the list by currency</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetClosedDeposits(System.String,System.Nullable{Bittrex.Net.Objects.DepositStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets list of closed deposits
            </summary>
            <param name="currency">Filter the list by currency</param>
            <param name="status">Filter the list by status of the deposit</param>
            <param name="startDate">Filter the list by date</param>
            <param name="endDate">Filter the list by date</param>
            <param name="pageSize">The max amount of results to return</param>
            <param name="nextPageToken">The id of the object after which to return results. Typically the last deposit id of the previous page</param>
            <param name="previousPageToken">The id of the object before which to return results. Typically the first deposit id of the next page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetClosedDepositsAsync(System.String,System.Nullable{Bittrex.Net.Objects.DepositStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets list of closed deposits
            </summary>
            <param name="currency">Filter the list by currency</param>
            <param name="status">Filter the list by status of the deposit</param>
            <param name="startDate">Filter the list by date</param>
            <param name="endDate">Filter the list by date</param>
            <param name="pageSize">The max amount of results to return</param>
            <param name="nextPageToken">The id of the object after which to return results. Typically the last deposit id of the previous page</param>
            <param name="previousPageToken">The id of the object before which to return results. Typically the first deposit id of the next page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetDepositsByTransactionId(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets list of deposits for a transaction id
            </summary>
            <param name="transactionId">The id of the transaction</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetDepositsByTransactionIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets list of deposits for a transaction id
            </summary>
            <param name="transactionId">The id of the transaction</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetDeposit(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a deposit by id
            </summary>
            <param name="depositId">The id of the deposit</param>
            <param name="ct">Cancellation token</param>
            <returns>Deposit info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetDepositAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a deposit by id
            </summary>
            <param name="depositId">The id of the deposit</param>
            <param name="ct">Cancellation token</param>
            <returns>Deposit info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetClosedOrders(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of closed orders
            </summary>
            <param name="symbol">Filter the list by symbol</param>
            <param name="startDate">Filter the list by date</param>
            <param name="endDate">Filter the list by date</param>
            <param name="pageSize">The max amount of results to return</param>
            <param name="nextPageToken">The id of the object after which to return results. Typically the last order id of the previous page</param>
            <param name="previousPageToken">The id of the object before which to return results. Typically the first order id of the next page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of closed orders</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetClosedOrdersAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of closed orders
            </summary>
            <param name="symbol">Filter the list by symbol</param>
            <param name="startDate">Filter the list by date</param>
            <param name="endDate">Filter the list by date</param>
            <param name="pageSize">The max amount of results to return</param>
            <param name="nextPageToken">The id of the object after which to return results. Typically the last order id of the previous page</param>
            <param name="previousPageToken">The id of the object before which to return results. Typically the first order id of the next page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of closed orders</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetOpenOrders(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetOpenOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetOrder(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets info on an order
            </summary>
            <param name="orderId">The id of the order to retrieve</param>
            <param name="ct">Cancellation token</param>
            <returns>Order info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetOrderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets info on an order
            </summary>
            <param name="orderId">The id of the order to retrieve</param>
            <param name="ct">Cancellation token</param>
            <returns>Order info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.CancelOrder(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels an order
            </summary>
            <param name="orderId">The id of the order</param>
            <param name="ct">Cancellation token</param>
            <returns>Order info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.CancelOrderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels an order
            </summary>
            <param name="orderId">The id of the order</param>
            <param name="ct">Cancellation token</param>
            <returns>Order info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.PlaceOrder(System.String,Bittrex.Net.Objects.OrderSide,Bittrex.Net.Objects.OrderTypeV3,System.Decimal,Bittrex.Net.Objects.TimeInForce,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Threading.CancellationToken)">
            <summary>
            Places an order
            </summary>
            <param name="symbol">The symbol of the order</param>
            <param name="direction">The direction of the order</param>
            <param name="type">The type of order</param>
            <param name="quantity">The quantity of the order</param>
            <param name="timeInForce">The time in force of the order</param>
            <param name="limit">The limit price of the order (limit orders only)</param>
            <param name="ceiling">The ceiling price of the order (ceiling orders only)</param>
            <param name="clientOrderId">Id to track the order by</param>
            <param name="ct">Cancellation token</param>
            <returns>The order info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.PlaceOrderAsync(System.String,Bittrex.Net.Objects.OrderSide,Bittrex.Net.Objects.OrderTypeV3,System.Decimal,Bittrex.Net.Objects.TimeInForce,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Threading.CancellationToken)">
            <summary>
            Places an order
            </summary>
            <param name="symbol">The symbol of the order</param>
            <param name="direction">The direction of the order</param>
            <param name="type">The type of order</param>
            <param name="quantity">The quantity of the order</param>
            <param name="timeInForce">The time in force of the order</param>
            <param name="limit">The limit price of the order (limit orders only)</param>
            <param name="ceiling">The ceiling price of the order (ceiling orders only)</param>
            <param name="clientOrderId">Id to track the order by</param>
            <param name="ct">Cancellation token</param>
            <returns>The order info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetOpenWithdrawals(System.String,System.Nullable{Bittrex.Net.Objects.WithdrawalStatus},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open withdrawals
            </summary>
            <param name="currency">Filter by currency</param>
            <param name="status">Filter by status</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open withdrawals</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetOpenWithdrawalsAsync(System.String,System.Nullable{Bittrex.Net.Objects.WithdrawalStatus},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open withdrawals
            </summary>
            <param name="currency">Filter by currency</param>
            <param name="status">Filter by status</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open withdrawals</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetClosedWithdrawals(System.String,System.Nullable{Bittrex.Net.Objects.WithdrawalStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of closed withdrawals
            </summary>
            <param name="currency">Filter by currency</param>
            <param name="status">Filter by status</param>
            <param name="startDate">Filter by date</param>
            <param name="endDate">Filter by date</param>
            <param name="pageSize">The max amount of results to return</param>
            <param name="nextPageToken">The id of the object after which to return results. Typically the last withdrawal id of the previous page</param>
            <param name="previousPageToken">The id of the object before which to return results. Typically the first withdrawal id of the next page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of closed withdrawals</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetClosedWithdrawalsAsync(System.String,System.Nullable{Bittrex.Net.Objects.WithdrawalStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of closed withdrawals
            </summary>
            <param name="currency">Filter by currency</param>
            <param name="status">Filter by status</param>
            <param name="startDate">Filter by date</param>
            <param name="endDate">Filter by date</param>
            <param name="pageSize">The max amount of results to return</param>
            <param name="nextPageToken">The id of the object after which to return results. Typically the last withdrawal id of the previous page</param>
            <param name="previousPageToken">The id of the object before which to return results. Typically the first withdrawal id of the next page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of closed withdrawals</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetWithdrawalsByTransactionId(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of withdrawals by transaction id
            </summary>
            <param name="transactionId">The id of the transaction</param>
            <param name="ct">Cancellation token</param>
            <returns>List withdrawals</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetWithdrawalsByTransactionIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of withdrawals by transaction id
            </summary>
            <param name="transactionId">The id of the transaction</param>
            <param name="ct">Cancellation token</param>
            <returns>List withdrawals</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetWithdrawal(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets withdrawal by id
            </summary>
            <param name="id">The id of the withdrawal</param>
            <param name="ct">Cancellation token</param>
            <returns>Withdrawal info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.GetWithdrawalAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets withdrawal by id
            </summary>
            <param name="id">The id of the withdrawal</param>
            <param name="ct">Cancellation token</param>
            <returns>Withdrawal info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.CancelWithdrawal(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels a withdrawal
            </summary>
            <param name="id">The id of the withdrawal to cancel</param>
            <param name="ct">Cancellation token</param>
            <returns>Withdrawal info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.CancelWithdrawalAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels a withdrawal
            </summary>
            <param name="id">The id of the withdrawal to cancel</param>
            <param name="ct">Cancellation token</param>
            <returns>Withdrawal info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.Withdraw(System.String,System.Decimal,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Withdraw from Bittrex
            </summary>
            <param name="currency">The currency to withdraw</param>
            <param name="quantity">The quantity to withdraw</param>
            <param name="address">The address to withdraw to</param>
            <param name="addressTag">A tag for the address</param>
            <param name="ct">Cancellation token</param>
            <returns>Info about the withdrawal</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexClientV3.WithdrawAsync(System.String,System.Decimal,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Withdraw from Bittrex
            </summary>
            <param name="currency">The currency to withdraw</param>
            <param name="quantity">The quantity to withdraw</param>
            <param name="address">The address to withdraw to</param>
            <param name="addressTag">A tag for the address</param>
            <param name="ct">Cancellation token</param>
            <returns>Info about the withdrawal</returns>
        </member>
        <member name="T:Bittrex.Net.Interfaces.IBittrexSocketClient">
            <summary>
            Interface for the Bittrex socket client
            </summary>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexSocketClient.GetSymbolSummaries">
            <summary>
            Gets the current summaries for all symbols
            </summary>
            <returns>Symbol summaries</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexSocketClient.GetSymbolSummariesAsync">
            <summary>
            Gets the current summaries for all symbols
            </summary>
            <returns>Symbol summaries</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexSocketClient.GetOrderBook(System.String)">
            <summary>
            Gets the state of a specific symbol
            500 Buys
            100 Fills
            500 Sells
            </summary>
            <param name="symbol">The name of the symbol to query</param>
            <returns>The current exchange state</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexSocketClient.GetOrderBookAsync(System.String)">
            <summary>
            Gets the state of a specific symbol
            500 Buys
            100 Fills
            500 Sells
            </summary>
            <param name="symbol">The name of the symbol to query</param>
            <returns>The current exchange state</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexSocketClient.SubscribeToOrderBookUpdates(System.String,System.Action{Bittrex.Net.Objects.BittrexStreamOrderBookUpdate})">
            <summary>
            Subscribes to order book and trade updates on a specific symbol
            </summary>
            <param name="symbol">The name of the symbol to subscribe on</param>
            <param name="onUpdate">The update event handler</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexSocketClient.SubscribeToOrderBookUpdatesAsync(System.String,System.Action{Bittrex.Net.Objects.BittrexStreamOrderBookUpdate})">
            <summary>
            Subscribes to order book and trade updates on a specific symbol
            </summary>
            <param name="symbol">The name of the symbol to subscribe on</param>
            <param name="onUpdate">The update event handler</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexSocketClient.SubscribeToSymbolSummariesUpdate(System.Action{System.Collections.Generic.IEnumerable{Bittrex.Net.Objects.BittrexStreamSymbolSummary}})">
            <summary>
            Subscribes to updates of summaries for all symbols
            </summary>
            <param name="onUpdate">The update event handler</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexSocketClient.SubscribeToSymbolSummariesUpdateAsync(System.Action{System.Collections.Generic.IEnumerable{Bittrex.Net.Objects.BittrexStreamSymbolSummary}})">
            <summary>
            Subscribes to updates of summaries for all symbols
            </summary>
            <param name="onUpdate">The update event handler</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexSocketClient.SubscribeToSymbolSummariesLiteUpdate(System.Action{System.Collections.Generic.IEnumerable{Bittrex.Net.Objects.BittrexStreamSymbolSummaryLite}})">
            <summary>
            Subscribes to lite summary updates for all symbols
            </summary>
            <param name="onUpdate">The update event handler</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexSocketClient.SubscribeToSymbolSummariesLiteUpdateAsync(System.Action{System.Collections.Generic.IEnumerable{Bittrex.Net.Objects.BittrexStreamSymbolSummaryLite}})">
            <summary>
            Subscribes to lite summary updates for all symbols
            </summary>
            <param name="onUpdate">The update event handler</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexSocketClient.SubscribeToAccountUpdates(System.Action{Bittrex.Net.Objects.BittrexStreamBalanceData},System.Action{Bittrex.Net.Objects.BittrexStreamOrderData})">
            <summary>
            Subscribes to balance updates
            </summary>
            <param name="onBalanceUpdate">The update event handler for balance updates</param>
            <param name="onOrderUpdate">The update event handler for order updates</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.IBittrexSocketClient.SubscribeToAccountUpdatesAsync(System.Action{Bittrex.Net.Objects.BittrexStreamBalanceData},System.Action{Bittrex.Net.Objects.BittrexStreamOrderData})">
            <summary>
            Subscribes to balance updates
            </summary>
            <param name="onBalanceUpdate">The update event handler for balance updates</param>
            <param name="onOrderUpdate">The update event handler for order updates</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexAccountOrder">
            <summary>
            Information about an order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccountOrder.AccountId">
            <summary>
            Account id associated with the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccountOrder.OrderUuid">
            <summary>
            The order Guid
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccountOrder.Exchange">
            <summary>
            The symbol the order is on
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccountOrder.Type">
            <summary>
            The order type
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccountOrder.Quantity">
            <summary>
            The quantity of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccountOrder.QuantityRemaining">
            <summary>
            The remaining quantity of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccountOrder.Limit">
            <summary>
            The order limit
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccountOrder.Reserved">
            <summary>
            The reserved currency for this order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccountOrder.ReserveRemaining">
            <summary>
            The remaining reserve currency for this order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccountOrder.CommissionReserved">
            <summary>
            The commission reserved for this order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccountOrder.CommissionReserveRemaining">
            <summary>
            The remaining commission reserve for this order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccountOrder.CommissionPaid">
            <summary>
            The amount of commission paid for this order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccountOrder.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccountOrder.PricePerUnit">
            <summary>
            The price per unit
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccountOrder.Opened">
            <summary>
            Timestamp when order was opened
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccountOrder.Closed">
            <summary>
            Timestamp when order was closed
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccountOrder.IsOpen">
            <summary>
            Whether the order is still open
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccountOrder.Sentinel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccountOrder.CancelInitiated">
            <summary>
            Whether a cancel has begun processing
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccountOrder.ImmediateOrCancel">
            <summary>
            Whether it is a ImmediateOrCancel order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccountOrder.IsConditional">
            <summary>
            Whether the order is conditional
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccountOrder.Condition">
            <summary>
            The condition of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccountOrder.ConditionTarget">
            <summary>
            The condition target of the order
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexApiResult`1">
            <summary>
            The result of an Api call
            </summary>
            <typeparam name="T">The result type</typeparam>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexApiResult`1.Success">
            <summary>
            Whether the Api call was successful
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexApiResult`1.Result">
            <summary>
            The result of the Api call
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexBalance">
            <summary>
            Information about a balance
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexBalance.Currency">
            <summary>
            The currency for which the balance is
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexBalance.Balance">
            <summary>
            The total balance
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexBalance.Available">
            <summary>
            The available balance
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexBalance.Pending">
            <summary>
            The pending balance
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexBalance.CryptoAddress">
            <summary>
            The crypto address this balance is on
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexCurrency">
            <summary>
            Information about a currency
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexCurrency.Currency">
            <summary>
            The abbreviation of the currency
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexCurrency.CurrencyLong">
            <summary>
            The full name of the currency
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexCurrency.MinConfirmation">
            <summary>
            The minimum number of confirmations before a deposit is added to a account
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexCurrency.TransactionFee">
            <summary>
            The transaction fee for a currency
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexCurrency.IsActive">
            <summary>
            Whether the currency is currently active
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexCurrency.CoinType">
            <summary>
            The base coin type
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexCurrency.BaseAddress">
            <summary>
            The base address
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexCurrency.Notice">
            <summary>
            Additional information about the state of this currency
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexDeposit">
            <summary>
            Information about a deposit
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDeposit.Id">
            <summary>
            The id of the deposit
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDeposit.Amount">
            <summary>
            The amount of the deposit
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDeposit.Currency">
            <summary>
            The currency of the deposit
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDeposit.Confirmations">
            <summary>
            The current number of confirmations the deposit has
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDeposit.LastUpdated">
            <summary>
            Timestamp of the last update
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDeposit.TransactionId">
            <summary>
            Transaction id of the deposit
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDeposit.CryptoAddress">
            <summary>
            The address the deposit is to
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexDepositAddress">
            <summary>
            Information about a deposit address for a currency
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDepositAddress.Currency">
            <summary>
            Currency the address is for
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDepositAddress.Address">
            <summary>
            The deposit address of the currency
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.FillType">
            <summary>
            Whether the order is partially or fully filled
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.FillType.Fill">
            <summary>
            Filled
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.FillType.PartialFill">
            <summary>
            Partially filled
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.OrderSide">
            <summary>
            Side of an order
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.OrderSide.Buy">
            <summary>
            Buy
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.OrderSide.Sell">
            <summary>
            Sell
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.OrderType">
            <summary>
            The type of order
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.OrderType.Limit">
            <summary>
            Limit order; place an order for a specific price
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.OrderType.Market">
            <summary>
            Symbol order; execute order at the best price available when placed
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.OrderSideExtended">
            <summary>
            Order type and side
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.OrderSideExtended.LimitBuy">
            <summary>
            Buy limit order
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.OrderSideExtended.LimitSell">
            <summary>
            Sell limit order
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.OrderSideExtended.MarketBuy">
            <summary>
            Buy market order
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.OrderSideExtended.MarketSell">
            <summary>
            Sell market order
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.TickInterval">
            <summary>
            Interval for klines
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.TickInterval.OneMinute">
            <summary>
            1m
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.TickInterval.FiveMinutes">
            <summary>
            5m
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.TickInterval.HalfHour">
            <summary>
            30m
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.TickInterval.OneHour">
            <summary>
            1h
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.TickInterval.OneDay">
            <summary>
            1d
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.TimeInEffect">
            <summary>
            The time an order is active
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.TimeInEffect.GoodTillCancelled">
            <summary>
            Order will be active until cancelled
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.TimeInEffect.ImmediateOrCancel">
            <summary>
            Order has to be at least partially filled or it will be canceled on placing
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.ConditionType">
            <summary>
            Type of condition
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.ConditionType.None">
            <summary>
            No condition
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.ConditionType.GreaterThan">
            <summary>
            Greater than
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.ConditionType.LessThan">
            <summary>
            Lesser than
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.ConditionType.StopLossFixed">
            <summary>
            Stop loss fixed
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.ConditionType.StopLossPercentage">
            <summary>
            Stop loss percentage
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.OrderUpdateType">
            <summary>
            Update type for an order
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.OrderUpdateType.Open">
            <summary>
            Open
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.OrderUpdateType.PartialFill">
            <summary>
            Partially filled
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.OrderUpdateType.Fill">
            <summary>
            Fully filled
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.OrderUpdateType.Cancel">
            <summary>
            Cancelled
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.TimeInForce">
            <summary>
            Time an order is active
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.TimeInForce.GoodTillCancelled">
            <summary>
            Active until cancelled
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.TimeInForce.ImmediateOrCancel">
            <summary>
            Has to be at least partially filled upon placing or cancelled
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.TimeInForce.FillOrKill">
            <summary>
            Has to be fully filled upon placing or cancelled
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.TimeInForce.PostOnlyGoodTillCancelled">
            <summary>
            Post only good till cancel
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.TimeInForce.PostOnlyGoodTillDate">
            <summary>
            Post only good till specific date
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.OrderTypeV3">
            <summary>
            Type of order
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.OrderTypeV3.Limit">
            <summary>
            Limit order; place at specific price
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.OrderTypeV3.Market">
            <summary>
            Symbol order; execute order at best price on placing
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.OrderTypeV3.CeilingLimit">
            <summary>
            Ceiling limit order; a limit order filling for a specific amount of base currency
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.OrderTypeV3.CeilingMarket">
            <summary>
            Ceiling market order; a market order filling for a specific amount of base currency
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.DepositAddressStatus">
            <summary>
            Deposit address state
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.DepositAddressStatus.Requested">
            <summary>
            Requested
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.DepositAddressStatus.Provisioned">
            <summary>
            Provisioned
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.DepositStatus">
            <summary>
            Status of a deposit
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.DepositStatus.Pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.DepositStatus.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.DepositStatus.Orphaned">
            <summary>
            Orphaned
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.DepositStatus.Invalidated">
            <summary>
            Invalidated
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.SymbolStatus">
            <summary>
            Status of a symbol
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.SymbolStatus.Online">
            <summary>
            Online
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.SymbolStatus.Offline">
            <summary>
            Offline, not tradable
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.OrderStatus">
            <summary>
            Status of an order
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.OrderStatus.Open">
            <summary>
            Order is open/active
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.OrderStatus.Closed">
            <summary>
            Order is closed
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.WithdrawalStatus">
            <summary>
            Status of a withdrawal
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.WithdrawalStatus.Requested">
            <summary>
            Requested
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.WithdrawalStatus.Authorized">
            <summary>
            Authorized
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.WithdrawalStatus.Pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.WithdrawalStatus.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.WithdrawalStatus.InvalidAddress">
            <summary>
            Failed; invalid address
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.WithdrawalStatus.Cancelled">
            <summary>
            Cancelled
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.KlineInterval">
            <summary>
            Interval of klines
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.KlineInterval.OneMinute">
            <summary>
            1m
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.KlineInterval.FiveMinutes">
            <summary>
            5m
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.KlineInterval.OneHour">
            <summary>
            1h
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.KlineInterval.OneDay">
            <summary>
            1d
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexGuid">
            <summary>
            Wrapper for a Guid response
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexGuid.Uuid">
            <summary>
            The Guid
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexKline">
            <summary>
            Bittrex kline
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexKline.Open">
            <summary>
            Open price of the kline
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexKline.High">
            <summary>
            High price of the kline
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexKline.Low">
            <summary>
            Low price of the kline
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexKline.Close">
            <summary>
            Close price of the kline
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexKline.Volume">
            <summary>
            Volume of the kline
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexKline.BaseVolume">
            <summary>
            Base volume of the kline
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexKline.Timestamp">
            <summary>
            Timestamp of the kline
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexOpenOrdersOrder">
            <summary>
            Information about an order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOpenOrdersOrder.Uuid">
            <summary>
            
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOpenOrdersOrder.OrderUuid">
            <summary>
            The order Guid
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOpenOrdersOrder.Exchange">
            <summary>
            The symbol the order is on
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOpenOrdersOrder.OrderType">
            <summary>
            The order side
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOpenOrdersOrder.Quantity">
            <summary>
            The quantity of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOpenOrdersOrder.QuantityRemaining">
            <summary>
            The remaining quantity of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOpenOrdersOrder.Limit">
            <summary>
            The order limit
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOpenOrdersOrder.CommissionPaid">
            <summary>
            The amount of commission paid for this order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOpenOrdersOrder.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOpenOrdersOrder.PricePerUnit">
            <summary>
            The price per unit
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOpenOrdersOrder.Opened">
            <summary>
            Timestamp when order was opened
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOpenOrdersOrder.Closed">
            <summary>
            Timestamp when order was closed
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOpenOrdersOrder.CancelInitiated">
            <summary>
            Whether a cancel has begun processing
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOpenOrdersOrder.ImmediateOrCancel">
            <summary>
            Whether it is a ImmediateOrCancel order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOpenOrdersOrder.IsConditional">
            <summary>
            Whether the order is conditional
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOpenOrdersOrder.Condition">
            <summary>
            The condition of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOpenOrdersOrder.ConditionTarget">
            <summary>
            The condition target of the order
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexClientOptions">
            <summary>
            Options for the Bittrex client
            </summary>
        </member>
        <member name="M:Bittrex.Net.Objects.BittrexClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexClientOptions.BaseAddressV2">
            <summary>
            The V2 API base address
            </summary>
        </member>
        <member name="M:Bittrex.Net.Objects.BittrexClientOptions.Copy">
            <summary>
            Copy the options
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexSocketClientOptions">
            <summary>
            Options for the Bittrex socket client
            </summary>
        </member>
        <member name="M:Bittrex.Net.Objects.BittrexSocketClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexOrderBookOptions">
            <summary>
            Options for the Bittrex symbol order book
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderBookOptions.SocketClient">
            <summary>
            The client to use for the socket connection. When using the same client for multiple order books the connection can be shared.
            </summary>
        </member>
        <member name="M:Bittrex.Net.Objects.BittrexOrderBookOptions.#ctor(Bittrex.Net.Interfaces.IBittrexSocketClient)">
            <summary>
            </summary>
            <param name="socketClient">The client to use for the socket connection. When using the same client for multiple order books the connection can be shared.</param>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexOrderBook">
            <summary>
            Order book for a symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderBook.Buy">
            <summary>
            List of buy orders in the order book
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderBook.Sell">
            <summary>
            List of sell orders in the order book
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexOrderBookEntry">
            <summary>
            Order book entry
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderBookEntry.Quantity">
            <summary>
            Total quantity of order at this price
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderBookEntry.Rate">
            <summary>
            Price of the orders
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderBookEntry.Type">
            <summary>
            how to handle data (used by stream)
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.OrderBookEntryType">
            <summary>
            https://github.com/JKorf/Bittrex.Net/pull/42#discussion_r160122966
            Type 0 – you need to add this entry into your orderbook. There were no orders at matching price before.
            Type 1 – you need to delete this entry from your orderbook.This entry no longer exists (no orders at matching price)
            Type 2 – you need to edit this entry.There are different number of orders at this price.
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.OrderBookEntryType.NewEntry">
            <summary>
            A newly added entry
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.OrderBookEntryType.RemoveEntry">
            <summary>
            A entry to remove
            </summary>
        </member>
        <member name="F:Bittrex.Net.Objects.OrderBookEntryType.UpdateEntry">
            <summary>
            An updated entry
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexOrderHistoryOrder">
            <summary>
            Information about an order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderHistoryOrder.OrderUuid">
            <summary>
            Guid of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderHistoryOrder.Exchange">
            <summary>
            Symbol the order is on
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderHistoryOrder.TimeStamp">
            <summary>
            Timestamp when the order was opened
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderHistoryOrder.OrderType">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderHistoryOrder.Limit">
            <summary>
            The limit of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderHistoryOrder.Quantity">
            <summary>
            Quantity of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderHistoryOrder.QuantityRemaining">
            <summary>
            The remaining quantity of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderHistoryOrder.Commission">
            <summary>
            The commission paid for the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderHistoryOrder.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderHistoryOrder.PricePerUnit">
            <summary>
            The price paid per unit
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderHistoryOrder.IsConditional">
            <summary>
            Whether the order is conditional
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderHistoryOrder.Condition">
            <summary>
            The order condition
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderHistoryOrder.ConditionTarget">
            <summary>
            The order condition target
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderHistoryOrder.ImmediateOrCancel">
            <summary>
            Whether the order was an ImmediateOrCancel order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderHistoryOrder.Closed">
            <summary>
            Timestamp when the order was closed
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexPrice">
            <summary>
            Price of a symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexPrice.Bid">
            <summary>
            The highest bid on this symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexPrice.Ask">
            <summary>
            The lowest ask on this symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexPrice.Last">
            <summary>
            The last price an order was completed at
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexStreamBalanceData">
            <summary>
            Stream balance data
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamBalanceData.Nonce">
            <summary>
            Nonce
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamBalanceData.Delta">
            <summary>
            Deltas
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexStreamBalance">
            <summary>
            Stream balance
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamBalance.Guid">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamBalance.AccountId">
            <summary>
            Account id
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamBalance.Currency">
            <summary>
            Currency the balance is for
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamBalance.Balance">
            <summary>
            The total balance
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamBalance.Available">
            <summary>
            The available balance
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamBalance.Pending">
            <summary>
            The pending balance
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamBalance.CryptoAddress">
            <summary>
            The deposit address
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamBalance.Requested">
            <summary>
            
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamBalance.Updated">
            <summary>
            Last update time
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamBalance.AutoSell">
            <summary>
            
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexStreamOrderBookUpdate">
            <summary>
            Stream exchange state update
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrderBookUpdate.Nonce">
            <summary>
            Nonce
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrderBookUpdate.Symbol">
            <summary>
            Name of the symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrderBookUpdate.Buys">
            <summary>
            Buys in the order book
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrderBookUpdate.Sells">
            <summary>
            Sells in the order book
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrderBookUpdate.Fills">
            <summary>
            Symbol history
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexStreamOrderBook">
            <summary>
            Stream order book state
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrderBook.Nonce">
            <summary>
            Nonce
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrderBook.Symbol">
            <summary>
            Name of the symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrderBook.Buys">
            <summary>
            Buys in the order book
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrderBook.Sells">
            <summary>
            Sells in the order book
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrderBook.Fills">
            <summary>
            Symbol history
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexStreamFill">
            <summary>
            Stream fill
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamFill.Id">
            <summary>
            ID of the fill
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamFill.Timestamp">
            <summary>
            Timestamp of the fill
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamFill.Quantity">
            <summary>
            Quantity of the fill
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamFill.Rate">
            <summary>
            Rate of the fill
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamFill.OrderType">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexStreamMarketSummaryUpdate">
            <summary>
            Stream symbol summary update
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamMarketSummaryUpdate.Nonce">
            <summary>
            Nonce
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamMarketSummaryUpdate.Deltas">
            <summary>
            The current market summaries
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexStreamMarketSummariesQuery">
            <summary>
            Stream symbol summary response
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamMarketSummariesQuery.Nonce">
            <summary>
            Nonce
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamMarketSummariesQuery.Deltas">
            <summary>
            The current market summaries
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexStreamOrderData">
            <summary>
            Stream order data
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrderData.AccountId">
            <summary>
            Account id associated with the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrderData.Nonce">
            <summary>
            Nonce
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrderData.Type">
            <summary>
            The trigger for this update
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrderData.Order">
            <summary>
            Order information
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexStreamOrder">
            <summary>
            Stream order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrder.Uuid">
            <summary>
            The unique identifier
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrder.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrder.OrderId">
            <summary>
            The order id
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrder.Symbol">
            <summary>
            The symbol this order is for
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrder.OrderType">
            <summary>
            The order type
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrder.Quantity">
            <summary>
            The quantity of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrder.QuantityRemaining">
            <summary>
            The remaining quantity of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrder.Limit">
            <summary>
            The order limit
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrder.CommissionPaid">
            <summary>
            The amount of commission paid for this order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrder.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrder.PricePerUnit">
            <summary>
            The price per unit
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrder.Opened">
            <summary>
            Timestamp when order was opened
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrder.Closed">
            <summary>
            Timestamp when order was closed
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrder.IsOpen">
            <summary>
            Whether the order is still open
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrder.CancelInitiated">
            <summary>
            Whether a cancel is initiated for this order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrder.ImmediateOrCancel">
            <summary>
            Whether it is a ImmediateOrCancel order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrder.IsConditional">
            <summary>
            Whether the order is conditional
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrder.Condition">
            <summary>
            The condition of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrder.ConditionTarget">
            <summary>
            The condition target of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrder.Updated">
            <summary>
            Last update time
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexStreamOrderBookEntry">
            <summary>
            Stream order book
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrderBookEntry.Quantity">
            <summary>
            Total quantity of order at this price
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrderBookEntry.Price">
            <summary>
            Price of the orders
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexStreamOrderBookUpdateEntry">
            <summary>
            Stream order book entry
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamOrderBookUpdateEntry.Type">
            <summary>
            how to handle data (used by stream)
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexStreamSymbolSummary">
            <summary>
            24 hour summary of a symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamSymbolSummary.Symbol">
            <summary>
            The name of the symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamSymbolSummary.High">
            <summary>
            The highest price in the last 24 hour
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamSymbolSummary.Low">
            <summary>
            The lowest price in the last 24 hour
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamSymbolSummary.Volume">
            <summary>
            The volume in the last 24 hour in the quote currency 
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamSymbolSummary.Last">
            <summary>
            The latest price
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamSymbolSummary.BaseVolume">
            <summary>
            The base volume in the last 24 hour in the base currency
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamSymbolSummary.TimeStamp">
            <summary>
            Timestamp of the summary
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamSymbolSummary.Bid">
            <summary>
            The highest bid
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamSymbolSummary.Ask">
            <summary>
            The lowest ask
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamSymbolSummary.OpenBuyOrders">
            <summary>
            Current open buy orders
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamSymbolSummary.OpenSellOrders">
            <summary>
            Current open sell orders
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamSymbolSummary.PrevDay">
            <summary>
            Price 24 hours ago
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamSymbolSummary.Created">
            <summary>
            Timestamp when created
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexStreamSymbolSummaryLite">
            <summary>
            Stream lite symbol summary
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamSymbolSummaryLite.Symbol">
            <summary>
            Name of the symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamSymbolSummaryLite.Last">
            <summary>
            Price of last executed trade
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamSymbolSummaryLite.BaseVolume">
            <summary>
            The base volume
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexStreamSymbolTrade">
            <summary>
            Information about an order executed on a symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamSymbolTrade.Id">
            <summary>
            The order id
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamSymbolTrade.Timestamp">
            <summary>
            Timestamp of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamSymbolTrade.Quantity">
            <summary>
            Quantity of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamSymbolTrade.Price">
            <summary>
            Price of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamSymbolTrade.Total">
            <summary>
            Total price of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamSymbolTrade.FillType">
            <summary>
            Whether the order was fully filled
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexStreamSymbolTrade.OrderType">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexSymbol">
            <summary>
            Information about a symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbol.QuoteCurrency">
            <summary>
            The quote currency
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbol.BaseCurrency">
            <summary>
            The base currency
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbol.QuoteCurrencyLong">
            <summary>
            The long name of the quote currency
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbol.BaseCurrencyLong">
            <summary>
            The long name of the base currency
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbol.MinTradeSize">
            <summary>
            The minimun size of an order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbol.Symbol">
            <summary>
            The name of the symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbol.IsActive">
            <summary>
            Whether the symbol is active
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbol.Created">
            <summary>
            Timestamp when the symbol was created
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbol.Notice">
            <summary>
            Additional information about the state of this symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbol.IsSponsored">
            <summary>
            Whether the symbol is sponsored by Bittrex
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbol.LogoUrl">
            <summary>
            Url of the logo
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexSymbolSummary">
            <summary>
            24 hour summary of a symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolSummary.Symbol">
            <summary>
            The name of the symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolSummary.High">
            <summary>
            The highest price in the last 24 hour
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolSummary.Low">
            <summary>
            The lowest price in the last 24 hour
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolSummary.Volume">
            <summary>
            The volume in the last 24 hour in the quote currency 
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolSummary.Last">
            <summary>
            The latest price
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolSummary.BaseVolume">
            <summary>
            The base volume in the last 24 hour in the base currency
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolSummary.TimeStamp">
            <summary>
            Timestamp of the summary
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolSummary.Bid">
            <summary>
            The highest bid
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolSummary.Ask">
            <summary>
            The lowest ask
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolSummary.OpenBuyOrders">
            <summary>
            Current open buy orders
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolSummary.OpenSellOrders">
            <summary>
            Current open sell orders
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolSummary.PrevDay">
            <summary>
            Price 24 hours ago
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolSummary.Created">
            <summary>
            Timestamp when created
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexSymbolTrade">
            <summary>
            Information about an order executed on a symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolTrade.Id">
            <summary>
            The order id
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolTrade.Timestamp">
            <summary>
            Timestamp of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolTrade.Quantity">
            <summary>
            Quantity of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolTrade.Price">
            <summary>
            Price of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolTrade.Total">
            <summary>
            Total price of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolTrade.FillType">
            <summary>
            Whether the order was fully filled
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolTrade.OrderType">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexWithdrawal">
            <summary>
            Information about a withdrawal
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.PaymentUuid">
            <summary>
            Guid of the payment
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.Currency">
            <summary>
            Currency of the withdrawal
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.Amount">
            <summary>
            Amount of the withdrawal
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.Address">
            <summary>
            Address the withdrawal is to
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.Opened">
            <summary>
            Timestamp when withdrawal was opened
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.Authorized">
            <summary>
            Whether the withdrawal is authorized
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.PendingPayment">
            <summary>
            Whether there is pending payment
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.TransactionCost">
            <summary>
            Cost of the transaction
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.TransactionId">
            <summary>
            Id of the transaction
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.Canceled">
            <summary>
            Whether the withdrawal is canceled
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.InvalidAddress">
            <summary>
            Whether the withdrawal is to an invalid address
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.V3.BittrexBalanceV3">
            <summary>
            Balance info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexBalanceV3.Currency">
            <summary>
            The currency
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexBalanceV3.Total">
            <summary>
            The total funds
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexBalanceV3.Available">
            <summary>
            The available funds
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.V3.BittrexCurrencyV3">
            <summary>
            Bittrex currency info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexCurrencyV3.Symbol">
            <summary>
            The symbol for this currency
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexCurrencyV3.Name">
            <summary>
            The full name of the currency
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexCurrencyV3.CoinType">
            <summary>
            The type of the currency
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexCurrencyV3.Status">
            <summary>
            The status of the currency
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexCurrencyV3.MinConfirmations">
            <summary>
            The minimal amount of confirmation that is needed before the funds of a deposit are credited to the account
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexCurrencyV3.Notice">
            <summary>
            Additional info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexCurrencyV3.TransactionFee">
            <summary>
            The transaction fee
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexCurrencyV3.LogoUrl">
            <summary>
            Url to the logo
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.V3.BittrexDepositAddressV3">
            <summary>
            Deposit address info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexDepositAddressV3.Status">
            <summary>
            The status of the deposit address
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexDepositAddressV3.Currency">
            <summary>
            The currency of the deposit address
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexDepositAddressV3.Address">
            <summary>
            the address
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexDepositAddressV3.AddressTag">
            <summary>
            The tag of the address
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.V3.BittrexDepositV3">
            <summary>
            Deposit info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexDepositV3.Id">
            <summary>
            The id of the deposit
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexDepositV3.Currency">
            <summary>
            The currency of the deposit
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexDepositV3.Quantity">
            <summary>
            The quantity of the deposit
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexDepositV3.Address">
            <summary>
            The address of the deposit
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexDepositV3.AddressTag">
            <summary>
            The tag of the address
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexDepositV3.TransactionId">
            <summary>
            The transaction id of the deposit
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexDepositV3.Confirmations">
            <summary>
            The current amount of confirmations
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexDepositV3.UpdatedAt">
            <summary>
            The timestamp of the last update
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexDepositV3.CompletedAt">
            <summary>
            The timestamp of when this deposit was completed
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexDepositV3.Status">
            <summary>
            The status of the deposit
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.V3.BittrexKlineV3">
            <summary>
            Symbol kline info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexKlineV3.StartsAt">
            <summary>
            The opening time of this kline
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexKlineV3.Open">
            <summary>
            The price at opening
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexKlineV3.Close">
            <summary>
            The price at closing
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexKlineV3.High">
            <summary>
            The highest price during this kline
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexKlineV3.Low">
            <summary>
            The lowest price during this kline
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexKlineV3.Volume">
            <summary>
            The volume during this kline
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexKlineV3.BaseVolume">
            <summary>
            The volume of this candle in the base currency
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.V3.BittrexOrderBookV3">
            <summary>
            Order book
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexOrderBookV3.Bid">
            <summary>
            The bids in this book
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexOrderBookV3.Ask">
            <summary>
            The asks in this book
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.V3.BittrexOrderBookEntryV3">
            <summary>
            Entry for the order book
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexOrderBookEntryV3.Quantity">
            <summary>
            The quantity of the entry
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexOrderBookEntryV3.Rate">
            <summary>
            The price of the entry
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.V3.BittrexSymbolTradeV3">
            <summary>
            Trade entry
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexSymbolTradeV3.ExecutedAt">
            <summary>
            The timestamp of the trade execution
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.V3.BittrexOrderV3">
            <summary>
            Bittrex order info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexOrderV3.Id">
            <summary>
            The id of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexOrderV3.Symbol">
            <summary>
            The symbol of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexOrderV3.Direction">
            <summary>
            The direction of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexOrderV3.Type">
            <summary>
            The type of order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexOrderV3.Quantity">
            <summary>
            The quantity of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexOrderV3.Limit">
            <summary>
            The limit of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexOrderV3.Ceiling">
            <summary>
            The ceiling of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexOrderV3.TimeInForce">
            <summary>
            The time in force of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexOrderV3.ExpiresAt">
            <summary>
            When the order expires
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexOrderV3.ClientOrderId">
            <summary>
            Id to track the order by
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexOrderV3.FillQuantity">
            <summary>
            The quantity that's been filled
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexOrderV3.Commission">
            <summary>
            The commission paid for this order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexOrderV3.Proceeds">
            <summary>
            The proceeds of this order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexOrderV3.Status">
            <summary>
            The status of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexOrderV3.CreatedAt">
            <summary>
            When the order was created
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexOrderV3.UpdatedAt">
            <summary>
            When the order was last updated
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexOrderV3.ClosedAt">
            <summary>
            When the order was closed
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.V3.BittrexSymbolSummaryV3">
            <summary>
            Symbol summary info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexSymbolSummaryV3.Symbol">
            <summary>
            the symbol the summary is for
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexSymbolSummaryV3.High">
            <summary>
            The high price for this symbol in the last 24 hours
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexSymbolSummaryV3.Low">
            <summary>
            The low price for this symbol in the last 24 hours
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexSymbolSummaryV3.Volume">
            <summary>
            The volume of this symbol during the last 24 hours
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexSymbolSummaryV3.BaseVolume">
            <summary>
            The volume of this symbol in the base currency during the last 24 hours
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexSymbolSummaryV3.PercentChange">
            <summary>
            The percentage change of this symbol for the last 24 hours
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexSymbolSummaryV3.UpdatedAt">
            <summary>
            The timestamp of when this summary was last updated
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.V3.BittrexSymbolV3">
            <summary>
            Symbol info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexSymbolV3.Symbol">
            <summary>
            The symbol of the symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexSymbolV3.BaseCurrency">
            <summary>
            The base currency of the symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexSymbolV3.QuoteCurrency">
            <summary>
            The quote currency of the symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexSymbolV3.MinTradeSize">
            <summary>
            The minimum trade size for this symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexSymbolV3.Precision">
            <summary>
            The max precision for this symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexSymbolV3.Status">
            <summary>
            The status of the symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexSymbolV3.CreatedAt">
            <summary>
            When the symbol was created
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexSymbolV3.Notice">
            <summary>
            Additional info
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.V3.BittrexTickV3">
            <summary>
            Market tick
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexTickV3.Symbol">
            <summary>
            Symbol of the ticker
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexTickV3.LastTradeRate">
            <summary>
            The price of the last trade
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexTickV3.BidRate">
            <summary>
            The highest bid price
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexTickV3.AskRate">
            <summary>
            The lowest ask price
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.V3.BittrexWithdrawalV3">
            <summary>
            Withdrawal info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexWithdrawalV3.Id">
            <summary>
            The id of the withdrawal
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexWithdrawalV3.Currency">
            <summary>
            The currency of the withdrawal
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexWithdrawalV3.Quantity">
            <summary>
            The quantity of the withdrawal
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexWithdrawalV3.Address">
            <summary>
            The address the withdrawal is to
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexWithdrawalV3.AddressTag">
            <summary>
            The tag of the address
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexWithdrawalV3.TransactionCost">
            <summary>
            The transaction cost of the withdrawal
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexWithdrawalV3.TransactionId">
            <summary>
            The transaction id
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexWithdrawalV3.Status">
            <summary>
            The status of the withdrawal
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexWithdrawalV3.CreatedAt">
            <summary>
            The time the withdrawal was created
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.V3.BittrexWithdrawalV3.CompletedAt">
            <summary>
            The time the withdrawal was completed
            </summary>
        </member>
    </members>
</doc>
