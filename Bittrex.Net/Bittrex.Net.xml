<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bittrex.Net</name>
    </assembly>
    <members>
        <member name="T:Bittrex.Net.BittrexHelpers">
            <summary>
            Helper functions
            </summary>
        </member>
        <member name="M:Bittrex.Net.BittrexHelpers.ValidateBittrexSymbol(System.String)">
            <summary>
            Validate the string is a valid Bittrex symbol.
            </summary>
            <param name="symbolString">string to validate</param>
        </member>
        <member name="M:Bittrex.Net.BittrexHelpers.GetSequence(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}})">
            <summary>
            Get the sequence number from the response headers, or null if no sequence number is present
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="T:Bittrex.Net.BittrexSymbolOrderBook">
            <summary>
            Order book implementation
            </summary>
        </member>
        <member name="M:Bittrex.Net.BittrexSymbolOrderBook.#ctor(System.String,System.Int32,Bittrex.Net.Objects.BittrexOrderBookOptions)">
            <summary>
            Create a new order book instance
            </summary>
            <param name="symbol">The symbol the order book is for</param>
            <param name="limit">The number of entries in the order book</param>
            <param name="options">Options for the order book</param>
        </member>
        <member name="M:Bittrex.Net.BittrexSymbolOrderBook.DoStartAsync">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSymbolOrderBook.DoResyncAsync">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSymbolOrderBook.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Bittrex.Net.BittrexClientSpot">
            <summary>
            Client for the Bittrex V3 API
            </summary>
        </member>
        <member name="E:Bittrex.Net.BittrexClientSpot.OnOrderPlaced">
            <summary>
            Event triggered when an order is placed via this client
            </summary>
        </member>
        <member name="E:Bittrex.Net.BittrexClientSpot.OnOrderCanceled">
            <summary>
            Event triggered when an order is canceled via this client. Note that this does not trigger when using CancelAllOpenOrdersAsync
            </summary>
        </member>
        <member name="M:Bittrex.Net.BittrexClientSpot.#ctor">
            <summary>
            Create a new instance of BittrexClient using the default options
            </summary>
        </member>
        <member name="M:Bittrex.Net.BittrexClientSpot.#ctor(Bittrex.Net.Objects.BittrexClientSpotOptions)">
            <summary>
            Create a new instance of BittrexClient using the default options
            </summary>
        </member>
        <member name="M:Bittrex.Net.BittrexClientSpot.SetDefaultOptions(Bittrex.Net.Objects.BittrexClientSpotOptions)">
            <summary>
            Sets the default options to use for new clients
            </summary>
            <param name="options">The options to use for new clients</param>
        </member>
        <member name="M:Bittrex.Net.BittrexClientSpot.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret. Api keys can be managed at https://bittrex.com/Manage#sectionApi
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="M:Bittrex.Net.BittrexClientSpot.ParseErrorResponse(Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexClientSpot.WriteParamBody(CryptoExchange.Net.Interfaces.IRequest,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexClientSpot.GetUrl(System.String)">
            <summary>
            Get url for an endpoint
            </summary>
            <param name="endpoint"></param>
            <returns></returns>
        </member>
        <member name="M:Bittrex.Net.BittrexClientSpot.GetSymbolName(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotAccount.GetAssetPermissionAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotAccount.GetAssetPermissionsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotAccount.GetSymbolPermissionAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotAccount.GetSymbolPermissionsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotAccount.GetAccountAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotAccount.GetTradingFeesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotAccount.GetAccountVolumeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotAccount.GetBalanceAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotAccount.GetDepositAddressesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotAccount.GetDepositAddressAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotAccount.RequestDepositAddressAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotAccount.GetOpenDepositsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotAccount.GetClosedDepositsAsync(System.String,System.Nullable{Bittrex.Net.Enums.DepositStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotAccount.GetDepositsByTransactionIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotAccount.GetDepositAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotAccount.GetOpenWithdrawalsAsync(System.String,System.Nullable{Bittrex.Net.Enums.WithdrawalStatus},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotAccount.GetClosedWithdrawalsAsync(System.String,System.Nullable{Bittrex.Net.Enums.WithdrawalStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotAccount.GetWithdrawalsByTransactionIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotAccount.GetWithdrawalAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotAccount.CancelWithdrawalAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotAccount.WithdrawAsync(System.String,System.Decimal,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotAccount.GetWithdrawalWhitelistAddressesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotExchangeData.GetSymbolAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotExchangeData.GetSymbolSummariesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotExchangeData.GetSymbolSummaryAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotExchangeData.GetOrderBookAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotExchangeData.GetTradeHistoryAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotExchangeData.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotExchangeData.GetTickersAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotExchangeData.GetKlinesAsync(System.String,Bittrex.Net.Enums.KlineInterval,System.Nullable{Bittrex.Net.Enums.KlineType},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotExchangeData.GetHistoricalKlinesAsync(System.String,Bittrex.Net.Enums.KlineInterval,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{Bittrex.Net.Enums.KlineType},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotExchangeData.GetAssetsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotExchangeData.GetAssetAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotTrading.GetClosedOrdersAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotTrading.GetOpenOrdersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotTrading.GetOrderAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotTrading.GetUserTradeByIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotTrading.GetUserTradesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotTrading.GetOrderTradesAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotTrading.CancelOrderAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotTrading.CancelAllOpenOrdersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotTrading.PlaceOrderAsync(System.String,Bittrex.Net.Enums.OrderSide,Bittrex.Net.Enums.OrderType,Bittrex.Net.Enums.TimeInForce,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotTrading.GetConditionalOrderAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotTrading.CancelConditionalOrderAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotTrading.GetClosedConditionalOrdersAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotTrading.GetOpenConditionalOrdersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotTrading.PlaceConditionalOrderAsync(System.String,Bittrex.Net.Enums.ConditionalOrderOperand,Bittrex.Net.Objects.BittrexUnplacedOrder,Bittrex.Net.Objects.BittrexLinkedOrder,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotTrading.PlaceMultipleOrdersAsync(Bittrex.Net.Objects.BittrexNewBatchOrder[],System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.Clients.Rest.Spot.BittrexClientSpotTrading.CancelMultipleOrdersAsync(System.String[],System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bittrex.Net.BittrexSocketClientSpot">
            <summary>
            Client for the Bittrex V3 websocket API
            </summary>
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.#ctor">
            <summary>
            Creates a new socket client using the default options
            </summary>
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.#ctor(Bittrex.Net.Objects.BittrexSocketClientSpotOptions)">
            <summary>
            Creates a new socket client using the provided options
            </summary>
            <param name="options">Options to use for this client</param>
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.SetDefaultOptions(Bittrex.Net.Objects.BittrexSocketClientSpotOptions)">
            <summary>
            Set the default options for new clients
            </summary>
            <param name="options">Options to use for new clients</param>
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.SubscribeToHeartbeatAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.DateTime}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.SubscribeToKlineUpdatesAsync(System.String,Bittrex.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Sockets.BittrexKlineUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Bittrex.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Sockets.BittrexKlineUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.SubscribeToSymbolSummaryUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Sockets.BittrexSummariesUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.SubscribeToSymbolSummaryUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Objects.BittrexSymbolSummary}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.SubscribeToSymbolSummaryUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Objects.BittrexSymbolSummary}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Sockets.BittrexOrderBookUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Sockets.BittrexOrderBookUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.SubscribeToTickerUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Sockets.BittrexTickersUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Objects.BittrexTick}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.SubscribeToTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Objects.BittrexTick}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Sockets.BittrexTradesUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Sockets.BittrexTradesUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Sockets.BittrexOrderUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Sockets.BittrexBalanceUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.SubscribeToUserTradeUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Sockets.BittrexExecutionUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.SubscribeToDepositUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Sockets.BittrexDepositUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.SubscribeToConditionalOrderUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Sockets.BittrexConditionalOrderUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.GetSocketConnection(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.SubscribeAndWaitAsync(CryptoExchange.Net.Sockets.SocketConnection,System.Object,CryptoExchange.Net.Sockets.SocketSubscription)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.QueryAndWaitAsync``1(CryptoExchange.Net.Sockets.SocketConnection,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.HandleQueryResponse``1(CryptoExchange.Net.Sockets.SocketConnection,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{``0}@)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.HandleSubscriptionResponse(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.MessageMatchesHandler(Newtonsoft.Json.Linq.JToken,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.MessageMatchesHandler(Newtonsoft.Json.Linq.JToken,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.AuthenticateSocketAsync(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.UnsubscribeAsync(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription)">
            <inheritdoc />
        </member>
        <member name="M:Bittrex.Net.BittrexSocketClientSpot.CreateSocket(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Bittrex.Net.Enums.ConditionalOrderOperand">
            <summary>
            Condition order operand
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.ConditionalOrderOperand.GreaterThan">
            <summary>
            Price above
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.ConditionalOrderOperand.LesserThan">
            <summary>
            Price below
            </summary>
        </member>
        <member name="T:Bittrex.Net.Enums.DepositAddressStatus">
            <summary>
            Deposit address state
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.DepositAddressStatus.Requested">
            <summary>
            Requested
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.DepositAddressStatus.Provisioned">
            <summary>
            Provisioned
            </summary>
        </member>
        <member name="T:Bittrex.Net.Enums.DepositStatus">
            <summary>
            Status of a deposit
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.DepositStatus.Pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.DepositStatus.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.DepositStatus.Orphaned">
            <summary>
            Orphaned
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.DepositStatus.Invalidated">
            <summary>
            Invalidated
            </summary>
        </member>
        <member name="T:Bittrex.Net.Enums.KlineInterval">
            <summary>
            Interval of klines
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.KlineInterval.OneMinute">
            <summary>
            1m
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.KlineInterval.FiveMinutes">
            <summary>
            5m
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.KlineInterval.OneHour">
            <summary>
            1h
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.KlineInterval.OneDay">
            <summary>
            1d
            </summary>
        </member>
        <member name="T:Bittrex.Net.Enums.KlineType">
            <summary>
            Type of klines
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.KlineType.Trade">
            <summary>
            Trade
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.KlineType.Midpoint">
            <summary>
            Mid point
            </summary>
        </member>
        <member name="T:Bittrex.Net.Enums.OrderSide">
            <summary>
            Side of an order
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.OrderSide.Buy">
            <summary>
            Buy
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.OrderSide.Sell">
            <summary>
            Sell
            </summary>
        </member>
        <member name="T:Bittrex.Net.Enums.OrderStatus">
            <summary>
            Status of an order
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.OrderStatus.Open">
            <summary>
            Order is open/active
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.OrderStatus.Closed">
            <summary>
            Order is closed
            </summary>
        </member>
        <member name="T:Bittrex.Net.Enums.OrderType">
            <summary>
            Type of order
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.OrderType.Limit">
            <summary>
            Limit order; place at specific price
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.OrderType.Market">
            <summary>
            Symbol order; execute order at best price on placing
            </summary>
        </member>
        <member name="T:Bittrex.Net.Enums.SymbolStatus">
            <summary>
            Status of a symbol
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.SymbolStatus.Online">
            <summary>
            Online
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.SymbolStatus.Offline">
            <summary>
            Offline, not tradable
            </summary>
        </member>
        <member name="T:Bittrex.Net.Enums.TimeInForce">
            <summary>
            Time an order is active
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.TimeInForce.GoodTillCanceled">
            <summary>
            Active until canceled
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.TimeInForce.ImmediateOrCancel">
            <summary>
            Has to be at least partially filled upon placing or canceled
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.TimeInForce.FillOrKill">
            <summary>
            Has to be fully filled upon placing or canceled
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.TimeInForce.PostOnlyGoodTillCanceled">
            <summary>
            Post only good till cancel
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.TimeInForce.PostOnlyGoodTillDate">
            <summary>
            Post only good till specific date
            </summary>
        </member>
        <member name="T:Bittrex.Net.Enums.WithdrawalStatus">
            <summary>
            Status of a withdrawal
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.WithdrawalStatus.Requested">
            <summary>
            Requested
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.WithdrawalStatus.Authorized">
            <summary>
            Authorized
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.WithdrawalStatus.Pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.WithdrawalStatus.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.WithdrawalStatus.InvalidAddress">
            <summary>
            Failed; invalid address
            </summary>
        </member>
        <member name="F:Bittrex.Net.Enums.WithdrawalStatus.Canceled">
            <summary>
            Canceled
            </summary>
        </member>
        <member name="T:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpot">
            <summary>
            Interface for the Bittrex V3 API client
            </summary>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpot.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret. Api keys can be managed at https://bittrex.com/Manage#sectionApi
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotAccount.GetAssetPermissionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get permissions for a specific asset
            </summary>
            <param name="asset">Asset</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotAccount.GetAssetPermissionsAsync(System.Threading.CancellationToken)">
            <summary>
            Get permissions for all assets
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotAccount.GetSymbolPermissionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get permissions for a specific symbol
            </summary>
            <param name="symbol">Symbol</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotAccount.GetSymbolPermissionsAsync(System.Threading.CancellationToken)">
            <summary>
            Get permissions for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotAccount.GetAccountAsync(System.Threading.CancellationToken)">
            <summary>
            Get account info
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Account info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotAccount.GetTradingFeesAsync(System.Threading.CancellationToken)">
            <summary>
            Get account trading fees
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Account trading fee</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotAccount.GetAccountVolumeAsync(System.Threading.CancellationToken)">
            <summary>
            Get account volume
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Account volume</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets current balances. Sequence number of the data available via ResponseHeaders.GetSequence()
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of balances</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotAccount.GetBalanceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets current balance for an asset
            </summary>
            <param name="asset">The name of the asset to get balance for</param>
            <param name="ct">Cancellation token</param>
            <returns>Balance for asset</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotAccount.GetDepositAddressesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets list of deposit addresses
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of deposit addresses</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotAccount.GetDepositAddressAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets deposit addresses for an asset
            </summary>
            <param name="asset">The name of the asset to get the deposit address for</param>
            <param name="ct">Cancellation token</param>
            <returns>Deposit addresses</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotAccount.RequestDepositAddressAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Request a deposit address for an asset
            </summary>
            <param name="asset">The name of the asset to get request a deposit address for</param>
            <param name="ct">Cancellation token</param>
            <returns>The deposit address</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotAccount.GetOpenDepositsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets list of open deposits. Sequence number of the data available via ResponseHeaders.GetSequence()
            </summary>
            <param name="asset">Filter the list by asset</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotAccount.GetClosedDepositsAsync(System.String,System.Nullable{Bittrex.Net.Enums.DepositStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets list of closed deposits
            </summary>
            <param name="asset">Filter the list by asset</param>
            <param name="status">Filter the list by status of the deposit</param>
            <param name="startTime">Filter the list by time</param>
            <param name="endTime">Filter the list by time</param>
            <param name="pageSize">The max amount of results to return</param>
            <param name="nextPageToken">The id of the object after which to return results. Typically the last deposit id of the previous page</param>
            <param name="previousPageToken">The id of the object before which to return results. Typically the first deposit id of the next page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotAccount.GetDepositsByTransactionIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets list of deposits for a transaction id
            </summary>
            <param name="transactionId">The id of the transaction</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotAccount.GetDepositAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a deposit by id
            </summary>
            <param name="depositId">The id of the deposit</param>
            <param name="ct">Cancellation token</param>
            <returns>Deposit info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotAccount.GetOpenWithdrawalsAsync(System.String,System.Nullable{Bittrex.Net.Enums.WithdrawalStatus},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open withdrawals
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="status">Filter by status</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open withdrawals</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotAccount.GetClosedWithdrawalsAsync(System.String,System.Nullable{Bittrex.Net.Enums.WithdrawalStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of closed withdrawals
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="status">Filter by status</param>
            <param name="startTime">Filter the list by time</param>
            <param name="endTime">Filter the list by time</param>
            <param name="pageSize">The max amount of results to return</param>
            <param name="nextPageToken">The id of the object after which to return results. Typically the last withdrawal id of the previous page</param>
            <param name="previousPageToken">The id of the object before which to return results. Typically the first withdrawal id of the next page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of closed withdrawals</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotAccount.GetWithdrawalsByTransactionIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of withdrawals by transaction id
            </summary>
            <param name="transactionId">The id of the transaction</param>
            <param name="ct">Cancellation token</param>
            <returns>List withdrawals</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotAccount.GetWithdrawalAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets withdrawal by id
            </summary>
            <param name="id">The id of the withdrawal</param>
            <param name="ct">Cancellation token</param>
            <returns>Withdrawal info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotAccount.CancelWithdrawalAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels a withdrawal
            </summary>
            <param name="id">The id of the withdrawal to cancel</param>
            <param name="ct">Cancellation token</param>
            <returns>Withdrawal info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotAccount.WithdrawAsync(System.String,System.Decimal,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Withdraw from Bittrex
            </summary>
            <param name="asset">The asset to withdraw</param>
            <param name="quantity">The quantity to withdraw</param>
            <param name="address">The address to withdraw to</param>
            <param name="addressTag">A tag for the address</param>
            <param name="clientWithdrawId">Client id to identify the withdrawal</param>
            <param name="ct">Cancellation token</param>
            <returns>Info about the withdrawal</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotAccount.GetWithdrawalWhitelistAddressesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a list of whitelisted address for withdrawals
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List withdrawal address</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the server time
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Time of the server</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets information about all available symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of symbols</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotExchangeData.GetSymbolAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets information about a symbol
            </summary>
            <param name="symbol">The symbol to get info for</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotExchangeData.GetSymbolSummariesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets summaries of all symbols. Sequence number of the data available via ResponseHeaders.GetSequence()
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of symbol summaries</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotExchangeData.GetSymbolSummaryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets summary of a symbol
            </summary>
            <param name="symbol">The symbol to get info for</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol summary</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotExchangeData.GetOrderBookAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the order book of a symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="limit">The number of results per side for the order book (1, 25 or 500)</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol order book</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotExchangeData.GetTradeHistoryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the trade history of a symbol. Sequence number of the data available via ResponseHeaders.GetSequence()
            </summary>
            <param name="symbol">The symbol to get trades for</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol trade list</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotExchangeData.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the ticker of a symbol
            </summary>
            <param name="symbol">The symbol to get ticker for</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol ticker</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotExchangeData.GetTickersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets list of tickers for all symbols. Sequence number of the data available via ResponseHeaders.GetSequence()
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Symbol tickers</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotExchangeData.GetKlinesAsync(System.String,Bittrex.Net.Enums.KlineInterval,System.Nullable{Bittrex.Net.Enums.KlineType},System.Threading.CancellationToken)">
            <summary>
            Gets the klines for a symbol. Sequence number of the data available via ResponseHeaders.GetSequence()
            </summary>
            <param name="symbol">The symbol to get klines for</param>
            <param name="interval">The interval of the klines</param>
            <param name="type">The type of klines</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol klines</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotExchangeData.GetHistoricalKlinesAsync(System.String,Bittrex.Net.Enums.KlineInterval,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{Bittrex.Net.Enums.KlineType},System.Threading.CancellationToken)">
            <summary>
            Gets historical klines for a symbol
            </summary>
            <param name="symbol">The symbol to get klines for</param>
            <param name="interval">The interval of the klines</param>
            <param name="year">The year to get klines for</param>
            <param name="month">The month to get klines for</param>
            <param name="day">The day to get klines for</param>
            <param name="type">The type of klines</param>
            <param name="ct">Cancellation token</param>
            <returns>Symbol kline</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotExchangeData.GetAssetsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a list of all assets
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of assets</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotExchangeData.GetAssetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets info on a asset
            </summary>
            <param name="asset">The name of the asset</param>
            <param name="ct">Cancellation token</param>
            <returns>Asset info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotTrading.GetClosedOrdersAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of closed orders
            </summary>
            <param name="symbol">Filter the list by symbol</param>
            <param name="startTime">Filter the list by time</param>
            <param name="endTime">Filter the list by time</param>
            <param name="pageSize">The max amount of results to return</param>
            <param name="nextPageToken">The id of the object after which to return results. Typically the last order id of the previous page</param>
            <param name="previousPageToken">The id of the object before which to return results. Typically the first order id of the next page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of closed orders</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotTrading.GetOpenOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders. Sequence number of the data available via ResponseHeaders.GetSequence()
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotTrading.GetOrderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets info on an order
            </summary>
            <param name="orderId">The id of the order to retrieve</param>
            <param name="ct">Cancellation token</param>
            <returns>Order info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotTrading.GetUserTradeByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets info on a user trade
            </summary>
            <param name="tradeId">The id of the trade to retrieve</param>
            <param name="ct">Cancellation token</param>
            <returns>Trade info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotTrading.GetUserTradesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets user trades
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="startTime">Filter the list by time</param>
            <param name="endTime">Filter the list by time</param>
            <param name="pageSize">The max amount of results to return</param>
            <param name="nextPageToken">The id of the object after which to return results. Typically the last withdrawal id of the previous page</param>
            <param name="previousPageToken">The id of the object before which to return results. Typically the first withdrawal id of the next page</param>
            <param name="ct">Cancellation token</param>
            <returns>Executions</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotTrading.GetOrderTradesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets trades for an order
            </summary>
            <param name="orderId">The id of the order to retrieve trades for</param>
            <param name="ct">Cancellation token</param>
            <returns>Executions</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotTrading.CancelOrderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels an order
            </summary>
            <param name="orderId">The id of the order</param>
            <param name="ct">Cancellation token</param>
            <returns>Order info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotTrading.CancelAllOpenOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels all open orders
            </summary>
            <param name="symbol">Only cancel open orders for a specific symbol</param>
            <param name="ct">Cancellation token</param>
            <returns>Order info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotTrading.PlaceOrderAsync(System.String,Bittrex.Net.Enums.OrderSide,Bittrex.Net.Enums.OrderType,Bittrex.Net.Enums.TimeInForce,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Places an order
            </summary>
            <param name="symbol">The symbol of the order</param>
            <param name="side">The side of the order</param>
            <param name="type">The type of order</param>
            <param name="quantity">The quantity of the order</param>
            <param name="timeInForce">The time in force of the order</param>
            <param name="price">The price of the order (limit orders only)</param>
            <param name="quoteQuantity">The amount of quote quantity to use</param>
            <param name="clientOrderId">Id to track the order by</param>
            <param name="useAwards">Option to use Bittrex credits for the order</param>
            <param name="ct">Cancellation token</param>
            <returns>The order info</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotTrading.PlaceMultipleOrdersAsync(Bittrex.Net.Objects.BittrexNewBatchOrder[],System.Threading.CancellationToken)">
            <summary>
            Place multiple orders in a single call
            </summary>
            <param name="orders">Orders to place</param>
            <param name="ct">Cancellation token</param>
            <returns>A WebCallResult indicating the result of the call, which contains a collection of CallResults for each of the placed orders</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotTrading.CancelMultipleOrdersAsync(System.String[],System.Threading.CancellationToken)">
            <summary>
            Cancel multiple orders in a single call
            </summary>
            <param name="ordersToCancel">Orders to cancel</param>
            <param name="ct">Cancellation token</param>
            <returns>A WebCallResult indicating the result of the call, which contains a collection of CallResults for each of the canceled orders</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotTrading.GetConditionalOrderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get details on a condtional order
            </summary>
            <param name="orderId">Id of the conditional order</param>
            <param name="ct">Cancellation token</param>
            <returns>Conditional order</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotTrading.CancelConditionalOrderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels a condtional order
            </summary>
            <param name="orderId">Id of the conditional order</param>
            <param name="ct">Cancellation token</param>
            <returns>Conditional order</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotTrading.GetClosedConditionalOrdersAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of closed conditional orders
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="startTime">Filter the list by time</param>
            <param name="endTime">Filter the list by time</param>
            <param name="pageSize">The max amount of results to return</param>
            <param name="nextPageToken">The id of the object after which to return results. Typically the last id of the previous page</param>
            <param name="previousPageToken">The id of the object before which to return results. Typically the first id of the next page</param>
            <param name="ct">Cancellation token</param>
            <returns>List of closed conditional orders</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotTrading.GetOpenConditionalOrdersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get list op open conditional orders
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="ct">Cancellation token</param>
            <returns>Conditional orders</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpotTrading.PlaceConditionalOrderAsync(System.String,Bittrex.Net.Enums.ConditionalOrderOperand,Bittrex.Net.Objects.BittrexUnplacedOrder,Bittrex.Net.Objects.BittrexLinkedOrder,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Threading.CancellationToken)">
            <summary>
            Place a new conditional order
            </summary>
            <param name="symbol">The symbol of the order</param>
            <param name="operand">The operand of the order</param>
            <param name="orderToCreate">Order to create when condition is triggered</param>
            <param name="orderToCancel">Order to cancel when condition is triggered</param>
            <param name="triggerPrice">Trigger price</param>
            <param name="trailingStopPercent">Trailing stop percent</param>
            <param name="clientConditionalOrderId">Client order id for conditional order</param>
            <param name="ct">Cancellation token</param>
            <returns>Condition order</returns>
        </member>
        <member name="T:Bittrex.Net.Interfaces.Clients.Socket.IBittrexSocketClientSpot">
            <summary>
            Interface for the Bittrex V3 socket client
            </summary>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Socket.IBittrexSocketClientSpot.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Socket.IBittrexSocketClientSpot.SubscribeToHeartbeatAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.DateTime}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to heartbeat updates
            </summary>
            <param name="onHeartbeat">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Socket.IBittrexSocketClientSpot.SubscribeToKlineUpdatesAsync(System.String,Bittrex.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Sockets.BittrexKlineUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to kline(candle) updates for a symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">Interval of the candles</param>
            <param name="onUpdate">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Socket.IBittrexSocketClientSpot.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Bittrex.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Sockets.BittrexKlineUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to kline(candle) updates for a symbol
            </summary>
            <param name="symbols">The symbols</param>
            <param name="interval">Interval of the candles</param>
            <param name="onUpdate">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Socket.IBittrexSocketClientSpot.SubscribeToSymbolSummaryUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Sockets.BittrexSummariesUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to all symbol summary updates
            </summary>
            <param name="onUpdate">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Socket.IBittrexSocketClientSpot.SubscribeToSymbolSummaryUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Objects.BittrexSymbolSummary}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to symbol summary updates
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onUpdate">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Socket.IBittrexSocketClientSpot.SubscribeToSymbolSummaryUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Objects.BittrexSymbolSummary}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to symbol summary updates
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onUpdate">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Socket.IBittrexSocketClientSpot.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Sockets.BittrexOrderBookUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates
            </summary>
            <param name="symbol">The symbol</param>
            <param name="depth">The depth of the oder book to receive update for</param>
            <param name="onUpdate">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Socket.IBittrexSocketClientSpot.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Sockets.BittrexOrderBookUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates
            </summary>
            <param name="symbols">The symbols</param>
            <param name="depth">The depth of the oder book to receive update for</param>
            <param name="onUpdate">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Socket.IBittrexSocketClientSpot.SubscribeToTickerUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Sockets.BittrexTickersUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to all symbols ticker updates
            </summary>
            <param name="onUpdate">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Socket.IBittrexSocketClientSpot.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Objects.BittrexTick}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to symbol ticker updates
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onUpdate">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Socket.IBittrexSocketClientSpot.SubscribeToTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Objects.BittrexTick}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to symbol ticker updates
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onUpdate">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Socket.IBittrexSocketClientSpot.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Sockets.BittrexTradesUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to symbol trade updates
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onUpdate">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Socket.IBittrexSocketClientSpot.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Sockets.BittrexTradesUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to symbol trade updates
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onUpdate">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Socket.IBittrexSocketClientSpot.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Sockets.BittrexOrderUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order updates
            </summary>
            <param name="onUpdate">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Socket.IBittrexSocketClientSpot.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Sockets.BittrexBalanceUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to balance updates
            </summary>
            <param name="onUpdate">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bittrex.Net.Interfaces.Clients.Socket.IBittrexSocketClientSpot.SubscribeToDepositUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bittrex.Net.Sockets.BittrexDepositUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to deposit updates
            </summary>
            <param name="onUpdate">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexAccount">
            <summary>
            Account info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccount.AccountId">
            <summary>
            Account id
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccount.SubAccountId">
            <summary>
            Sub account id
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccount.ActionsNeeded">
            <summary>
            Actions needed
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexAccountVolume">
            <summary>
            Volume info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccountVolume.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAccountVolume.Volume30Days">
            <summary>
            Volume 30 days
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexAsset">
            <summary>
            Bittrex asset info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAsset.Name">
            <summary>
            The name for this asset
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAsset.FullName">
            <summary>
            The full name of the asset
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAsset.CoinType">
            <summary>
            The type of the asset
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAsset.Status">
            <summary>
            The status of the asset
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAsset.MinConfirmations">
            <summary>
            The minimal amount of confirmation that is needed before the funds of a deposit are credited to the account
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAsset.Notice">
            <summary>
            Additional info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAsset.TransactionFee">
            <summary>
            The transaction fee
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAsset.LogoUrl">
            <summary>
            Url to the logo
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAsset.ProhibitedIn">
            <summary>
            List of prohibited regions. empty if its not restricted.
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAsset.BaseAddress">
            <summary>
            Base address of the asset
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAsset.AssociatedTermsOfService">
            <summary>
            List of associated terms of service.
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAsset.Tags">
            <summary>
            List of tags
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexAssetPermission">
            <summary>
            Asset permission
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAssetPermission.Symbol">
            <summary>
            Symbol of the asset
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAssetPermission.View">
            <summary>
            Allowed to view
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAssetPermission.Deposit">
            <summary>
            Allowed to buy
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAssetPermission.Withdraw">
            <summary>
            Allowed to sell
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexAssetDepositPermission">
            <summary>
            Deposit permission
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAssetDepositPermission.BlockChain">
            <summary>
            Allow to deposit via blockchain
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAssetDepositPermission.CreditCard">
            <summary>
            Allowed to deposit via credit card
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAssetDepositPermission.WireTransfer">
            <summary>
            Allowed to deposit via wire transfer
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAssetDepositPermission.Ach">
            <summary>
            Allowed  to deposit via ACH
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexAssetWithdrawPermission">
            <summary>
            Withdraw permission
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAssetWithdrawPermission.BlockChain">
            <summary>
            Allowed to withdraw via blockchain
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAssetWithdrawPermission.WireTransfer">
            <summary>
            Allowed to withdraw via wire transfer
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexAssetWithdrawPermission.Ach">
            <summary>
            Allowed  to deposit via ACH
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexBalance">
            <summary>
            Balance info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexBalance.Asset">
            <summary>
            The asset
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexBalance.Total">
            <summary>
            The total funds
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexBalance.Available">
            <summary>
            The available funds
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexBalance.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexConditionalOrder">
            <summary>
            Conditional order info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexConditionalOrder.Id">
            <summary>
            Id of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexConditionalOrder.Symbol">
            <summary>
            The symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexConditionalOrder.Operand">
            <summary>
            Operand type
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexConditionalOrder.TriggerPrice">
            <summary>
            Percent above the minimum price (GTE) or below the maximum price (LTE) at which to trigger
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexConditionalOrder.TrailingStopPercent">
            <summary>
            The stop price will automatically adjust relative to the most extreme trade value seen.
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexConditionalOrder.CreatedOrderId">
            <summary>
            Unique ID of the order that was created by this conditional, if there is one
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexConditionalOrder.OrderToCreate">
            <summary>
            Order to create if this conditional order is triggered
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexConditionalOrder.OrderToCancel">
            <summary>
            Order or conditional order to cancel if this conditional order triggers
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexConditionalOrder.ClientConditionalOrderId">
            <summary>
            Client-provided identifier for idempotency
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexConditionalOrder.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexConditionalOrder.OrderCreationErrorCode">
            <summary>
            If a conditional order fails to create an order when triggered, the failure reason will appear here
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexConditionalOrder.CreateTime">
            <summary>
            Create time
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexConditionalOrder.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexConditionalOrder.CloseTime">
            <summary>
            Close time
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexDeposit">
            <summary>
            Deposit info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDeposit.Id">
            <summary>
            The id of the deposit
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDeposit.Asset">
            <summary>
            The asset of the deposit
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDeposit.Quantity">
            <summary>
            The quantity of the deposit
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDeposit.FundsTransferMethodId">
            <summary>
            Payment method id
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDeposit.Address">
            <summary>
            The address of the deposit
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDeposit.AddressTag">
            <summary>
            The tag of the address
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDeposit.TransactionId">
            <summary>
            The transaction id of the deposit
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDeposit.Confirmations">
            <summary>
            The current amount of confirmations
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDeposit.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDeposit.CompleteTime">
            <summary>
            Completed time
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDeposit.Status">
            <summary>
            The status of the deposit
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDeposit.Source">
            <summary>
            Source
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDeposit.AccountId">
            <summary>
            Account id
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDeposit.Error">
            <summary>
            Error info
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexDepositAddress">
            <summary>
            Deposit address info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDepositAddress.Status">
            <summary>
            The status of the deposit address
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDepositAddress.Asset">
            <summary>
            The asset of the deposit address
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDepositAddress.Address">
            <summary>
            the address
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexDepositAddress.AddressTag">
            <summary>
            The tag of the address
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexError">
            <summary>
            Error info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexError.Code">
            <summary>
            Error code
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexError.Detail">
            <summary>
            Error details
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexError.Data">
            <summary>
            Additional data for the error
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexKline">
            <summary>
            Symbol kline info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexKline.OpenTime">
            <summary>
            The opening time of this kline
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexKline.OpenPrice">
            <summary>
            The price at opening
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexKline.ClosePrice">
            <summary>
            The price at closing
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexKline.HighPrice">
            <summary>
            The highest price during this kline
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexKline.LowPrice">
            <summary>
            The lowest price during this kline
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexKline.Volume">
            <summary>
            The volume during this kline
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexKline.QuoteVolume">
            <summary>
            The quote volume of this candle
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexLinkedOrder">
            <summary>
            Linked order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexLinkedOrder.Id">
            <summary>
            Id of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexLinkedOrder.Type">
            <summary>
            Type of the order
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexNewBatchOrder">
            <summary>
            New batch order info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexNewBatchOrder.Symbol">
            <summary>
            Symbol the order is for
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexNewBatchOrder.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexNewBatchOrder.Type">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexNewBatchOrder.TimeInForce">
            <summary>
            Time in force
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexNewBatchOrder.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexNewBatchOrder.Price">
            <summary>
            Order price
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexNewBatchOrder.Ceiling">
            <summary>
            Ceiling
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexNewBatchOrder.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexNewBatchOrder.UseAwards">
            <summary>
            Use awards
            </summary>
        </member>
        <member name="M:Bittrex.Net.Objects.BittrexNewBatchOrder.#ctor(System.String,Bittrex.Net.Enums.OrderSide,Bittrex.Net.Enums.OrderType,Bittrex.Net.Enums.TimeInForce)">
            <summary>
            Create a new batch order
            </summary>
            <param name="symbol">Symbol of the order</param>
            <param name="side">Side of the order</param>
            <param name="type">Type of the order</param>
            <param name="timeInForce">Time in force</param>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexClientSpotOptions">
            <summary>
            Options for the Bittrex client
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexClientSpotOptions.Default">
            <summary>
            Default options for the spot client
            </summary>
        </member>
        <member name="M:Bittrex.Net.Objects.BittrexClientSpotOptions.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexSocketClientSpotOptions">
            <summary>
            Options for the Bittrex socket client
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSocketClientSpotOptions.Default">
            <summary>
            Default options for the spot client
            </summary>
        </member>
        <member name="M:Bittrex.Net.Objects.BittrexSocketClientSpotOptions.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexOrderBookOptions">
            <summary>
            Options for the Bittrex symbol order book
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderBookOptions.SocketClient">
            <summary>
            The client to use for the socket connection. When using the same client for multiple order books the connection can be shared.
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderBookOptions.RestClient">
            <summary>
            The rest client to use for requesting the initial order book
            </summary>
        </member>
        <member name="M:Bittrex.Net.Objects.BittrexOrderBookOptions.#ctor(Bittrex.Net.Interfaces.Clients.Socket.IBittrexSocketClientSpot,Bittrex.Net.Interfaces.Clients.Rest.Spot.IBittrexClientSpot)">
            <summary>
            </summary>
            <param name="socketClient">The client to use for the socket connection. When using the same client for multiple order books the connection can be shared.</param>
            <param name="restClient">The client to use for the initial order book request.</param>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexUnplacedOrder">
            <summary>
            Data on an unplaced order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexUnplacedOrder.Symbol">
            <summary>
            The symbol of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexUnplacedOrder.Side">
            <summary>
            The direction of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexUnplacedOrder.Type">
            <summary>
            The type of order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexUnplacedOrder.Quantity">
            <summary>
            The quantity of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexUnplacedOrder.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexUnplacedOrder.Ceiling">
            <summary>
            The ceiling of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexUnplacedOrder.TimeInForce">
            <summary>
            The time in force of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexUnplacedOrder.ClientOrderId">
            <summary>
            Id to track the order by
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexUnplacedOrder.UseAwards">
            <summary>
            Use awards
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexOrder">
            <summary>
            Bittrex order info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrder.Id">
            <summary>
            The id of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrder.QuantityFilled">
            <summary>
            The quantity that's been filled
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrder.Fee">
            <summary>
            The fee paid for this order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrder.QuoteQuantityFilled">
            <summary>
            The quote quantity filled of this order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrder.Status">
            <summary>
            The status of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrder.CreateTime">
            <summary>
            When the order was created
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrder.UpdateTime">
            <summary>
            When the order was last updated
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrder.CloseTime">
            <summary>
            When the order was closed
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrder.OrderToCancel">
            <summary>
            Conditional order to cancel if this order executes
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexOrderBook">
            <summary>
            Order book
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderBook.Sequence">
            <summary>
            The sequence number
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderBook.Bids">
            <summary>
            The bids in this book
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderBook.Asks">
            <summary>
            The asks in this book
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexOrderBookEntry">
            <summary>
            Entry for the order book
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderBookEntry.Quantity">
            <summary>
            The quantity of the entry
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexOrderBookEntry.Price">
            <summary>
            The price of the entry
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexSymbol">
            <summary>
            Symbol info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbol.Name">
            <summary>
            The symbol of the symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbol.BaseAsset">
            <summary>
            The base asset of the symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbol.QuoteAsset">
            <summary>
            The quote asset of the symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbol.MinTradeQuantity">
            <summary>
            The minimum trade quantity for this symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbol.Precision">
            <summary>
            The max precision for this symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbol.Status">
            <summary>
            The status of the symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbol.CreateTime">
            <summary>
            When the symbol was created
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbol.Notice">
            <summary>
            Additional info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbol.ProhibitedIn">
            <summary>
            List of prohibited regions. empty if its not restricted.
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbol.AssociatedTermsOfService">
            <summary>
            List of associated terms of service.
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbol.Tags">
            <summary>
            List of tags
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexSymbolPermission">
            <summary>
            Symbol permission
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolPermission.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolPermission.View">
            <summary>
            Allowed to view
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolPermission.Buy">
            <summary>
            Allowed to buy
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolPermission.Sell">
            <summary>
            Allowed to sell
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexSymbolSummary">
            <summary>
            Symbol summary info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolSummary.Symbol">
            <summary>
            the symbol the summary is for
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolSummary.HighPrice">
            <summary>
            The high price for this symbol in the last 24 hours
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolSummary.LowPrice">
            <summary>
            The low price for this symbol in the last 24 hours
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolSummary.Volume">
            <summary>
            Volume within the last 24 hours
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolSummary.QuoteVolume">
            <summary>
            Quote volume within the last 24 hours
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolSummary.PercentChange">
            <summary>
            The percentage change of this symbol for the last 24 hours
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexSymbolSummary.UpdateTime">
            <summary>
            The timestamp of when this summary was last updated
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexTick">
            <summary>
            Market tick
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexTick.Symbol">
            <summary>
            Symbol of the ticker
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexTick.LastPrice">
            <summary>
            The price of the last trade
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexTick.BestBidPrice">
            <summary>
            The highest bid price
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexTick.BestAskPrice">
            <summary>
            The lowest ask price
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexTrade">
            <summary>
            Info on a trade
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexTrade.Id">
            <summary>
            Unique id of the trade
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexTrade.TakerSide">
            <summary>
            Side of the taker
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexTrade.Quantity">
            <summary>
            The quantity of the trade
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexTrade.Price">
            <summary>
            The price of the trade
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexTrade.Timestamp">
            <summary>
            The timestamp of the trade execution
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexTradingFee">
            <summary>
            Trading fee info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexTradingFee.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexTradingFee.MakerRate">
            <summary>
            Maker rate
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexTradingFee.TakerRate">
            <summary>
            Taker rate
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexUserTrade">
            <summary>
            User trade info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexUserTrade.Id">
            <summary>
            Id of the trade
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexUserTrade.Symbol">
            <summary>
            The symbol of the execution
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexUserTrade.Timestamp">
            <summary>
            Timestamp of execution
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexUserTrade.Quantity">
            <summary>
            Execution quantity
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexUserTrade.Price">
            <summary>
            Execution price
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexUserTrade.OrderId">
            <summary>
            Id of the order
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexUserTrade.Fee">
            <summary>
            Paid fee
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexUserTrade.IsTaker">
            <summary>
            Is taker
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexWhitelistAddress">
            <summary>
            Whitelist address
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWhitelistAddress.Asset">
            <summary>
            The asset of the address
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWhitelistAddress.CreateTime">
            <summary>
            When the address was whitelisted
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWhitelistAddress.Status">
            <summary>
            Status of the address
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWhitelistAddress.ActiveTime">
            <summary>
            When it may be used for withdrawals
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWhitelistAddress.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWhitelistAddress.AddressTag">
            <summary>
            Tag for the address
            </summary>
        </member>
        <member name="T:Bittrex.Net.Objects.BittrexWithdrawal">
            <summary>
            Withdrawal info
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.Id">
            <summary>
            The id of the withdrawal
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.Asset">
            <summary>
            The asset of the withdrawal
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.Quantity">
            <summary>
            The quantity of the withdrawal
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.FundsTransferMethodId">
            <summary>
            Payment method id
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.Address">
            <summary>
            The address the withdrawal is to
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.AddressTag">
            <summary>
            The tag of the address
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.TransactionFee">
            <summary>
            The transaction cost of the withdrawal
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.TransactionId">
            <summary>
            The transaction id
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.Status">
            <summary>
            The status of the withdrawal
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.CreateTime">
            <summary>
            The time the withdrawal was created
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.CompleteTime">
            <summary>
            The time the withdrawal was completed
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.ClientWithdrawalId">
            <summary>
            Withdrawal id as specified by the client
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.Target">
            <summary>
            Withdrawal target
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.AccountId">
            <summary>
            Account id
            </summary>
        </member>
        <member name="P:Bittrex.Net.Objects.BittrexWithdrawal.Error">
            <summary>
            Error info
            </summary>
        </member>
        <member name="T:Bittrex.Net.Sockets.BittrexBalanceUpdate">
            <summary>
            Balance update
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexBalanceUpdate.AccountId">
            <summary>
            Account id for the balance change
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexBalanceUpdate.Sequence">
            <summary>
            Sequence
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexBalanceUpdate.Delta">
            <summary>
            Update data
            </summary>
        </member>
        <member name="T:Bittrex.Net.Sockets.BittrexConditionalOrderUpdate">
            <summary>
            Deposit update
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexConditionalOrderUpdate.AccountId">
            <summary>
            Account id for the deposit
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexConditionalOrderUpdate.Sequence">
            <summary>
            Sequence
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexConditionalOrderUpdate.Delta">
            <summary>
            Update data
            </summary>
        </member>
        <member name="T:Bittrex.Net.Sockets.BittrexDepositUpdate">
            <summary>
            Deposit update
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexDepositUpdate.AccountId">
            <summary>
            Account id for the deposit
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexDepositUpdate.Sequence">
            <summary>
            Sequence
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexDepositUpdate.Delta">
            <summary>
            Update data
            </summary>
        </member>
        <member name="T:Bittrex.Net.Sockets.BittrexExecutionUpdate">
            <summary>
            Execution update
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexExecutionUpdate.AccountId">
            <summary>
            Account id for the balance change
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexExecutionUpdate.Sequence">
            <summary>
            Sequence
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexExecutionUpdate.Deltas">
            <summary>
            Update data
            </summary>
        </member>
        <member name="T:Bittrex.Net.Sockets.BittrexKlineUpdate">
            <summary>
            Kline update data
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexKlineUpdate.Sequence">
            <summary>
            Sequence
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexKlineUpdate.Symbol">
            <summary>
            Symbol of the update
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexKlineUpdate.Interval">
            <summary>
            Interval
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexKlineUpdate.Delta">
            <summary>
            Kline data
            </summary>
        </member>
        <member name="T:Bittrex.Net.Sockets.BittrexOrderBookUpdate">
            <summary>
            Order book update data
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexOrderBookUpdate.Sequence">
            <summary>
            Sequence
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexOrderBookUpdate.Symbol">
            <summary>
            Symbol of the update
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexOrderBookUpdate.Depth">
            <summary>
            Depth
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexOrderBookUpdate.BidDeltas">
            <summary>
            Bid changes
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexOrderBookUpdate.AskDeltas">
            <summary>
            Ask changes
            </summary>
        </member>
        <member name="T:Bittrex.Net.Sockets.BittrexOrderUpdate">
            <summary>
            Order update
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexOrderUpdate.Sequence">
            <summary>
            Sequence
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexOrderUpdate.AccountId">
            <summary>
            Account id
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexOrderUpdate.Delta">
            <summary>
            Changed order
            </summary>
        </member>
        <member name="T:Bittrex.Net.Sockets.BittrexSummariesUpdate">
            <summary>
            Symbol summaries update
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexSummariesUpdate.Sequence">
            <summary>
            Sequence
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexSummariesUpdate.Deltas">
            <summary>
            Summary per symbol
            </summary>
        </member>
        <member name="T:Bittrex.Net.Sockets.BittrexTickersUpdate">
            <summary>
            Symbol tickers update
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexTickersUpdate.Sequence">
            <summary>
            Sequence
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexTickersUpdate.Deltas">
            <summary>
            Ticker per symbol
            </summary>
        </member>
        <member name="T:Bittrex.Net.Sockets.BittrexTradesUpdate">
            <summary>
            Symbol trade update
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexTradesUpdate.Sequence">
            <summary>
            Sequence
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexTradesUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bittrex.Net.Sockets.BittrexTradesUpdate.Deltas">
            <summary>
            Trades
            </summary>
        </member>
    </members>
</doc>
